/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\base\log.h>
%}

import "simics/base/types.dml";
import "simics/base/conf-object.dml";
import "simics/util/help-macros.dml";

extern void SIM_log_critical(conf_object_t *dev, int grp, char const *str, ...);
extern void SIM_log_error(conf_object_t *dev, int grp, char const *str, ...);
extern void SIM_log_info(int lvl, conf_object_t *dev, int grp, char const *str, ...);
extern uint32 SIM_log_level(conf_object_t const *obj);
extern void SIM_log_message(conf_object_t *obj, int level, uint64 group_ids, log_type_t log_type, char const *message);
extern void SIM_log_message_vararg(conf_object_t *obj, int level, uint64 grp, log_type_t log_type, char const *fmt, ...);
extern void SIM_log_register_groups(conf_class_t *cls, char const *const *names);
extern void SIM_log_spec_violation(int lvl, conf_object_t *dev, int grp, char const *str, ...);
extern void SIM_log_unimplemented(int lvl, conf_object_t *dev, int grp, char const *str, ...);
extern void SIM_set_log_level(conf_object_t *obj, uint32 level);
extern void VT_critical_error(char const *short_msg, char const *long_msg);
extern uint32 VT_effective_log_level(conf_object_t const *obj);
extern int VT_log_always_count(void);
extern void VT_log_critical(conf_object_t *dev, uint64 grp, char const *str, ...);
extern void VT_log_error(conf_object_t *dev, uint64 grp, char const *str, ...);
extern void VT_log_info(int lvl, conf_object_t *dev, uint64 grp, char const *str, ...);
extern bool VT_log_level_enough(conf_object_t *obj, uint32 lvl);
extern void VT_log_message(conf_object_t *obj, int level, int group_ids, log_type_t log_type, char const *message);
extern void VT_log_message64(conf_object_t *obj, int level, uint64 group_ids, log_type_t log_type, char const *message);
extern void VT_log_spec_violation(int lvl, conf_object_t *dev, uint64 grp, char const *str, ...);
extern void VT_log_unimplemented(int lvl, conf_object_t *dev, uint64 grp, char const *str, ...);
extern void VT_log_warning(conf_object_t *dev, uint64 grp, char const *str, ...);
extern typedef int log_type_t;
constant Sim_Log_Info = 0;
constant Sim_Log_Error = 1;
constant Sim_Log_Spec_Violation = 2;
constant Sim_Log_Unimplemented = 3;
constant Sim_Log_Critical = 4;
constant Sim_Log_Trace = 5;
constant Sim_Log_Warning = 6;
constant Sim_Log_Num_Types = 7;
extern typedef struct { } log_object_t;
