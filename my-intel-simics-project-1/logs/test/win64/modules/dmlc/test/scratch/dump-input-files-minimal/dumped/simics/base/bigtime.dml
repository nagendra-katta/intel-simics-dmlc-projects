/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\base\bigtime.h>
%}

import "simics/base-types.dml";
import "simics/util/int128.dml";
import "simics/util/help-macros.dml";
import "simics/base/duration.dml";
import "simics/base/attr-value.dml";

extern bigtime_t bigtime_add(bigtime_t t, duration_t delta);
extern bigtime_t bigtime_add_bigtime(bigtime_t a, bigtime_t b);
extern int64 bigtime_as_ps_hi(bigtime_t t);
extern int128 bigtime_as_ps_int128(bigtime_t t);
extern uint64 bigtime_as_ps_lo(bigtime_t t);
extern double bigtime_as_sec(bigtime_t t);
extern char *bigtime_as_string(bigtime_t t, char *buf);
extern duration_t bigtime_diff(bigtime_t t1, bigtime_t t2);
extern bigtime_t bigtime_div_floor(bigtime_t t, int64 divisor);
extern bigtime_t bigtime_div_raw(bigtime_t t, int64 divisor, bool *exact);
extern bool bigtime_eq(bigtime_t a, bigtime_t b);
extern bigtime_t bigtime_from_attr(attr_value_t a);
extern bigtime_t bigtime_from_ps(int64 ps_hi, uint64 ps_lo);
extern bigtime_t bigtime_from_ps_int128(int128 ps);
extern bigtime_t bigtime_from_ps_lo(int64 ps_lo);
extern bigtime_t bigtime_from_sec(double t);
extern bool bigtime_ge(bigtime_t a, bigtime_t b);
extern bool bigtime_gt(bigtime_t a, bigtime_t b);
extern bool bigtime_is_illegal(bigtime_t t);
extern bool bigtime_le(bigtime_t a, bigtime_t b);
extern bool bigtime_lt(bigtime_t a, bigtime_t b);
extern bigtime_t bigtime_mul(bigtime_t t, int64 factor);
extern bigtime_t bigtime_sub(bigtime_t t, duration_t delta);
extern bigtime_t bigtime_sub_bigtime(bigtime_t a, bigtime_t b);
extern attr_value_t bigtime_to_attr(bigtime_t t);
extern typedef struct { int128 val; } bigtime_t;
