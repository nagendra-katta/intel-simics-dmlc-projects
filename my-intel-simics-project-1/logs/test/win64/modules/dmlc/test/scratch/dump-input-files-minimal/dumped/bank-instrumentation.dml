/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\model-iface\bank-instrumentation.h>
%}

import "simics/base/conf-object.dml";
import "simics/base/memory-transaction.dml";
import "simics/model-iface/instrumentation-provider.dml";
import "simics/pywrap.dml";

extern typedef struct { } bank_access_t;
extern typedef struct { physical_address_t (*offset)(bank_access_t *handle); physical_address_t (*size)(bank_access_t *handle); void (*set_offset)(bank_access_t *handle, physical_address_t offset); void (*inquire)(bank_access_t *handle); conf_object_t *(*initiator)(bank_access_t *handle); } bank_before_read_interface_t;
extern typedef struct { physical_address_t (*offset)(bank_access_t *handle); physical_address_t (*size)(bank_access_t *handle); bool (*missed)(bank_access_t *handle); uint64 (*value)(bank_access_t *handle); void (*set_missed)(bank_access_t *handle, bool missed); void (*set_value)(bank_access_t *handle, uint64 value); conf_object_t *(*initiator)(bank_access_t *handle); } bank_after_read_interface_t;
extern typedef struct { physical_address_t (*offset)(bank_access_t *handle); physical_address_t (*size)(bank_access_t *handle); uint64 (*value)(bank_access_t *handle); void (*suppress)(bank_access_t *handle); void (*set_offset)(bank_access_t *handle, physical_address_t offset); void (*set_value)(bank_access_t *handle, uint64 value); conf_object_t *(*initiator)(bank_access_t *handle); } bank_before_write_interface_t;
extern typedef struct { physical_address_t (*offset)(bank_access_t *handle); physical_address_t (*size)(bank_access_t *handle); bool (*missed)(bank_access_t *handle); void (*set_missed)(bank_access_t *handle, bool missed); conf_object_t *(*initiator)(bank_access_t *handle); } bank_after_write_interface_t;
extern typedef struct { bank_callback_handle_t (*register_before_read)(conf_object_t *bank, conf_object_t *connection, uint64 offset, uint64 size, before_read_callback_t before_read, lang_void *user_data); bank_callback_handle_t (*register_after_read)(conf_object_t *bank, conf_object_t *connection, uint64 offset, uint64 size, after_read_callback_t after_read, lang_void *user_data); bank_callback_handle_t (*register_before_write)(conf_object_t *bank, conf_object_t *connection, uint64 offset, uint64 size, before_write_callback_t before_write, lang_void *user_data); bank_callback_handle_t (*register_after_write)(conf_object_t *bank, conf_object_t *connection, uint64 offset, uint64 size, after_write_callback_t after_write, lang_void *user_data); void (*remove_callback)(conf_object_t *bank, bank_callback_handle_t callback); void (*remove_connection_callbacks)(conf_object_t *bank, conf_object_t *connection); void (*enable_connection_callbacks)(conf_object_t *bank, conf_object_t *connection); void (*disable_connection_callbacks)(conf_object_t *bank, conf_object_t *connection); } bank_instrumentation_subscribe_interface_t;
extern typedef void (*after_read_callback_t)(conf_object_t *connection, bank_after_read_interface_t *access, bank_access_t *handle, lang_void *user_data);
extern typedef void (*after_write_callback_t)(conf_object_t *connection, bank_after_write_interface_t *access, bank_access_t *handle, lang_void *user_data);
extern typedef uintptr_t bank_callback_handle_t;
extern typedef void (*before_read_callback_t)(conf_object_t *connection, bank_before_read_interface_t *access, bank_access_t *handle, lang_void *user_data);
extern typedef void (*before_write_callback_t)(conf_object_t *connection, bank_before_write_interface_t *access, bank_access_t *handle, lang_void *user_data);
