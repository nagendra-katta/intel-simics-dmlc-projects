/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\base\memory-transaction.h>
%}

import "simics/base/types.dml";
import "simics/base/attr-value.dml";
import "simics/base/memory.dml";

extern void SIM_c_get_mem_op_value_buf(generic_transaction_t const *mop, uint8 *dst);
extern void SIM_c_set_mem_op_value_buf(generic_transaction_t *mop, uint8 const *src);
extern exception_type_t SIM_get_mem_op_exception(generic_transaction_t const *mop);
extern ini_type_t SIM_get_mem_op_ini_type(generic_transaction_t const *mop);
extern conf_object_t *SIM_get_mem_op_initiator(generic_transaction_t const *mop);
extern bool SIM_get_mem_op_inquiry(generic_transaction_t const *mop);
extern uint32 SIM_get_mem_op_page_cross(generic_transaction_t const *mop);
extern physical_address_t SIM_get_mem_op_physical_address(generic_transaction_t const *mop);
extern uint32 SIM_get_mem_op_size(generic_transaction_t const *mop);
extern mem_op_type_t SIM_get_mem_op_type(generic_transaction_t const *mop);
extern char const *SIM_get_mem_op_type_name(mem_op_type_t type);
extern void *SIM_get_mem_op_user_data(generic_transaction_t const *mop);
extern uint64 SIM_get_mem_op_value_be(generic_transaction_t const *mop);
extern attr_value_t SIM_get_mem_op_value_buf(generic_transaction_t const *mop);
extern uint64 SIM_get_mem_op_value_cpu(generic_transaction_t const *mop);
extern uint64 SIM_get_mem_op_value_le(generic_transaction_t const *mop);
extern logical_address_t SIM_get_mem_op_virtual_address(generic_transaction_t const *mop);
extern generic_transaction_t SIM_make_mem_op_read(physical_address_t addr, buffer_t data, bool inquiry, conf_object_t *initiator);
extern generic_transaction_t SIM_make_mem_op_write(physical_address_t addr, bytes_t data, bool inquiry, conf_object_t *initiator);
extern void SIM_mem_op_ensure_future_visibility(generic_transaction_t *mop);
extern bool SIM_mem_op_is_atomic(generic_transaction_t const *mop);
extern bool SIM_mem_op_is_control(generic_transaction_t const *mop);
extern bool SIM_mem_op_is_data(generic_transaction_t const *mop);
extern bool SIM_mem_op_is_from_cache(generic_transaction_t const *mop);
extern bool SIM_mem_op_is_from_cpu(generic_transaction_t const *mop);
extern bool SIM_mem_op_is_from_cpu_arch(generic_transaction_t const *mop, ini_type_t arch);
extern bool SIM_mem_op_is_from_device(generic_transaction_t const *mop);
extern bool SIM_mem_op_is_instruction(generic_transaction_t const *mop);
extern bool SIM_mem_op_is_prefetch(generic_transaction_t const *mop);
extern bool SIM_mem_op_is_read(generic_transaction_t const *mop);
extern bool SIM_mem_op_is_write(generic_transaction_t const *mop);
extern bool SIM_mem_op_may_stall(generic_transaction_t const *mop);
extern void SIM_set_mem_op_exception(generic_transaction_t *mop, exception_type_t exc);
extern void SIM_set_mem_op_initiator(generic_transaction_t *mop, ini_type_t type, conf_object_t *obj);
extern void SIM_set_mem_op_inquiry(generic_transaction_t *mop, bool inquiry);
extern void SIM_set_mem_op_physical_address(generic_transaction_t *mop, physical_address_t pa);
extern void SIM_set_mem_op_reissue(generic_transaction_t *mop);
extern void SIM_set_mem_op_type(generic_transaction_t *mop, mem_op_type_t type);
extern void SIM_set_mem_op_user_data(generic_transaction_t *mop, void *data);
extern void SIM_set_mem_op_value_be(generic_transaction_t *mop, uint64 value);
extern void SIM_set_mem_op_value_buf(generic_transaction_t *mop, attr_value_t value);
extern void SIM_set_mem_op_value_cpu(generic_transaction_t *mop, uint64 value);
extern void SIM_set_mem_op_value_le(generic_transaction_t *mop, uint64 value);
extern void SIM_set_mem_op_virtual_address(generic_transaction_t *mop, logical_address_t va);
extern typedef int mem_op_type_t;
constant Sim_Trans_Load = 0;
extern mem_op_type_t Sim_Trans_Store;
extern mem_op_type_t Sim_Trans_Instr_Fetch;
extern mem_op_type_t Sim_Trans_Prefetch;
extern mem_op_type_t Sim_Trans_Cache;
extern typedef int ini_type_t;
constant Sim_Initiator_Illegal = 0;
constant Sim_Initiator_CPU = 4096;
constant Sim_Initiator_CPU_V9 = 4352;
constant Sim_Initiator_CPU_X86 = 4608;
constant Sim_Initiator_CPU_PPC = 4864;
constant Sim_Initiator_CPU_Alpha = 5120;
constant Sim_Initiator_CPU_MIPS = 5632;
constant Sim_Initiator_CPU_ARM = 5888;
constant Sim_Initiator_CPU_V8 = 6144;
constant Sim_Initiator_CPU_H8 = 6400;
constant Sim_Initiator_CPU_SH = 6656;
constant Sim_Initiator_Device = 8192;
constant Sim_Initiator_PCI_Device = 8208;
constant Sim_Initiator_Cache = 12288;
constant Sim_Initiator_Other = 16384;
constant Sim_Initiator_User_Defined = 20480;
extern typedef int block_flag_t;
constant Sim_Block_Memhier = 1;
constant Sim_Block_MMU = 2;
constant Sim_Block_MMU_IOSTC = 4;
constant Sim_Block_Breakpoint = 8;
constant Sim_Block_Notmem = 16;
constant Sim_Block_Endian = 32;
constant Sim_Block_DSTC_Disabled = 64;
extern typedef struct { logical_address_t logical_address; physical_address_t physical_address; uint32 size; mem_op_type_t type; uint1 atomic; uint1 inquiry; uint1 non_coherent; uint1 _deprecated_ignore; uint1 may_stall; uint1 reissue; uint1 block_STC; uint1 use_page_cache; uint1 inverse_endian; uint2 page_cross; uint1 mem_hier_on_fetch; uint32 block_flags; ini_type_t ini_type; conf_object_t *ini_ptr; exception_type_t exception; void *user_ptr; uint8 *real_address; int space_count; transaction_t *transaction; page_t *reserved; uint32 reserved2; } generic_transaction_t;
