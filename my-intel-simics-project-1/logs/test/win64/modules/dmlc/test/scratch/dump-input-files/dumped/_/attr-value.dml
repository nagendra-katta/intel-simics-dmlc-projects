/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\base\attr-value.h>
%}

import "simics/host-info.dml";
import "simics/base/types.dml";
import "simics/base/version.dml";
import "simics/util/help-macros.dml";
import "simics/util/alloc.dml";

extern attr_value_t SIM_alloc_attr_dict(uint32 length);
extern attr_value_t SIM_alloc_attr_list(uint32 length);
extern bool SIM_ascanf(attr_value_t *list, char const *fmt, ...);
extern bool SIM_attr_boolean(attr_value_t attr);
extern attr_value_t SIM_attr_copy(attr_value_t val);
extern uint8 const *SIM_attr_data(attr_value_t attr);
extern uint32 SIM_attr_data_size(attr_value_t attr);
extern attr_value_t SIM_attr_dict_key(attr_value_t attr, uint32 index);
extern void SIM_attr_dict_resize(attr_value_t *attr, uint32 newsize);
extern void SIM_attr_dict_set_item(attr_value_t *attr, uint32 index, attr_value_t key, attr_value_t value);
extern uint32 SIM_attr_dict_size(attr_value_t attr);
extern attr_value_t SIM_attr_dict_value(attr_value_t attr, uint32 index);
extern double SIM_attr_floating(attr_value_t attr);
extern void SIM_attr_free(attr_value_t *value);
extern int64 SIM_attr_integer(attr_value_t attr);
extern bool SIM_attr_is_boolean(attr_value_t attr);
extern bool SIM_attr_is_data(attr_value_t attr);
extern bool SIM_attr_is_dict(attr_value_t attr);
extern bool SIM_attr_is_floating(attr_value_t attr);
extern bool SIM_attr_is_int64(attr_value_t attr);
extern bool SIM_attr_is_integer(attr_value_t attr);
extern bool SIM_attr_is_invalid(attr_value_t attr);
extern bool SIM_attr_is_list(attr_value_t attr);
extern bool SIM_attr_is_nil(attr_value_t attr);
extern bool SIM_attr_is_object(attr_value_t attr);
extern bool SIM_attr_is_string(attr_value_t attr);
extern bool SIM_attr_is_uint64(attr_value_t attr);
extern attr_value_t *SIM_attr_list(attr_value_t attr);
extern attr_value_t SIM_attr_list_item(attr_value_t attr, uint32 index);
extern void SIM_attr_list_resize(attr_value_t *attr, uint32 newsize);
extern void SIM_attr_list_set_item(attr_value_t *attr, uint32 index, attr_value_t elem);
extern uint32 SIM_attr_list_size(attr_value_t attr);
extern conf_object_t *SIM_attr_object(attr_value_t attr);
extern conf_object_t *SIM_attr_object_or_nil(attr_value_t attr);
extern bool SIM_attr_scanf(attr_value_t *list, char const *fmt, ...);
extern char const *SIM_attr_string(attr_value_t attr);
extern char *SIM_attr_string_detach(attr_value_t *attr);
extern void SIM_free_attribute(attr_value_t value);
extern attr_value_t SIM_make_attr_boolean(bool b);
extern attr_value_t SIM_make_attr_data(size_t size, void const *data);
extern attr_value_t SIM_make_attr_data_adopt(size_t size, void *data);
extern attr_value_t SIM_make_attr_floating(double d);
extern attr_value_t SIM_make_attr_int64(int64 i);
extern attr_value_t SIM_make_attr_invalid(void);
extern attr_value_t SIM_make_attr_list(uint32 length, ...);
extern attr_value_t SIM_make_attr_nil(void);
extern attr_value_t SIM_make_attr_object(conf_object_t *obj);
extern attr_value_t SIM_make_attr_string(char const *str);
extern attr_value_t SIM_make_attr_string_adopt(char *str);
extern attr_value_t SIM_make_attr_uint64(uint64 i);
extern bool VT_attr_values_equal(attr_value_t a1, attr_value_t a2);
extern void VT_bad_attr_type(char const *function, attr_kind_t wanted, attr_value_t actual);
extern attr_value_t VT_make_attr(char const *fmt, ...);
extern attr_value_t VT_make_attr_list_from_array(uint32 length, attr_value_t const *elems);
extern void VT_report_bad_attr_type(char const *function, attr_kind_t wanted, attr_value_t actual);
extern typedef int attr_kind_t;
constant Sim_Val_Invalid = 0;
constant Sim_Val_String = 1;
constant Sim_Val_Integer = 2;
constant Sim_Val_Floating = 3;
constant Sim_Val_List = 4;
constant Sim_Val_Data = 5;
constant Sim_Val_Nil = 6;
constant Sim_Val_Object = 7;
constant Sim_Val_Dict = 8;
constant Sim_Val_Boolean = 9;
constant Sim_Val_Py_Object = 10;
constant Sim_Val_Unresolved_Object = 11;
extern typedef struct { attr_kind_t private_kind; uint32 private_size; struct { char *string; int64 integer; bool boolean; double floating; attr_value_t *list; attr_dict_pair_t *dict; uint8 *data; conf_object_t *object; SIM_PYOBJECT *py_object; char *uobject; } private_u; } attr_value_t;
extern typedef struct { attr_value_t key; attr_value_t value; } attr_dict_pair_t;
