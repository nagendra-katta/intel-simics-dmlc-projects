/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\obsolete\6.h>
%}

import "simics/util/dbuffer.dml";
import "simics/model-iface/breakpoints.dml";
import "simics/processor/generic-spr.dml";

extern conf_object_t *SIM_current_processor(void);
extern bool SIM_is_loading_micro_checkpoint(conf_object_t *obj);
extern void SIM_register_copyright(char const *str);
extern typedef int i2c_device_state_t;
constant I2C_idle = 0;
constant I2C_master_transmit = 1;
constant I2C_master_receive = 2;
constant I2C_slave_transmit = 3;
constant I2C_slave_receive = 4;
constant I2C_max_states = 5;
extern typedef int i2c_device_flag_t;
constant I2C_flag_exclusive = 0;
constant I2C_flag_shared = 1;
extern typedef int i2c_status_t;
constant I2C_status_success = 0;
constant I2C_status_noack = 1;
constant I2C_status_bus_busy = 2;
extern typedef struct { breakpoint_set_t (*get_breakpoints)(conf_object_t *obj, access_t read_write_execute, generic_address_t start, generic_address_t end); void (*free_breakpoint_set)(conf_object_t *obj, breakpoint_set_t *set); } breakpoint_query_interface_t;
extern typedef struct { int (*create_group)(conf_object_t *obj, conf_object_t *image_obj); void (*protect)(conf_object_t *obj, int id); } pool_protect_interface_t;
extern typedef struct { int128 val; } slave_time_t;
extern typedef struct { slave_time_t (*delivery_time)(conf_object_t *obj); uint64 (*delivery_skey)(conf_object_t *obj); } link_endpoint_interface_t;
extern typedef struct { } recorder_t;
extern typedef struct { recorder_t *(*attach)(conf_object_t *rec, conf_object_t *obj, recorder_input_handler_t input_from_recorder); void (*detach)(conf_object_t *rec, recorder_t *r); void (*input)(conf_object_t *rec, recorder_t *r, dbuffer_t *data, uint32 uint_data); bool (*playback)(conf_object_t *rec); } recorder_interface_t;
extern typedef struct { void (*accept)(conf_object_t *obj, bytes_t msg); void (*accept_async)(conf_object_t *obj, bytes_t msg); } slave_agent_interface_t;
extern typedef struct { void (*send)(conf_object_t *obj, slave_time_t time, uint64 skey, bytes_t msg); void (*send_async)(conf_object_t *obj, bytes_t msg); } slaver_message_interface_t;
extern typedef struct { int (*start)(conf_object_t *i2c_bus, uint8 address); int (*stop)(conf_object_t *i2c_bus); uint8 (*read_data)(conf_object_t *i2c_bus); void (*write_data)(conf_object_t *i2c_bus, uint8 value); int (*register_device)(conf_object_t *i2c_bus, conf_object_t *device, uint8 address, uint8 mask, i2c_device_flag_t flags); void (*unregister_device)(conf_object_t *i2c_bus, conf_object_t *device, uint8 address, uint8 mask); } i2c_bus_interface_t;
extern typedef struct { int (*set_state)(conf_object_t *device, i2c_device_state_t state, uint8 address); uint8 (*read_data)(conf_object_t *device); void (*write_data)(conf_object_t *device, uint8 value); } i2c_device_interface_t;
extern typedef struct { void (*register_slave_address)(conf_object_t *i2c_link, conf_object_t *slave, uint32 address, uint32 mask); void (*unregister_slave_address)(conf_object_t *i2c_link, conf_object_t *slave, uint32 address, uint32 mask); void (*register_bridge)(conf_object_t *i2c_link, conf_object_t *bridge); void (*disconnect_device)(conf_object_t *i2c_link, conf_object_t *device); void (*start_request)(conf_object_t *i2c_link, conf_object_t *master, uint32 address); void (*read_request)(conf_object_t *i2c_link, conf_object_t *master); void (*ack_read_request)(conf_object_t *i2c_link, conf_object_t *master, i2c_status_t ack); void (*write_request)(conf_object_t *i2c_link, conf_object_t *master, uint8 value); void (*read_response)(conf_object_t *i2c_link, conf_object_t *slave, uint8 value); void (*ack_read_response)(conf_object_t *i2c_link, conf_object_t *slave); void (*write_response)(conf_object_t *i2c_link, conf_object_t *slave, i2c_status_t status); void (*start_response)(conf_object_t *i2c_link, conf_object_t *slave, i2c_status_t status); void (*stop)(conf_object_t *i2c_link, conf_object_t *master); } i2c_link_interface_t;
extern typedef struct { void (*start_request)(conf_object_t *device, uint32 address); void (*read_request)(conf_object_t *device); void (*ack_read_request)(conf_object_t *device, i2c_status_t ack); void (*write_request)(conf_object_t *device, uint8 value); void (*stop)(conf_object_t *device, uint8 repeated_start); } i2c_slave_interface_t;
extern typedef struct { void (*bus_freed)(conf_object_t *device); void (*read_response)(conf_object_t *device, uint8 value); void (*ack_read_response)(conf_object_t *device); void (*write_response)(conf_object_t *device, i2c_status_t status); void (*start_response)(conf_object_t *device, i2c_status_t status); } i2c_master_interface_t;
extern typedef struct { void (*address_added)(conf_object_t *device, uint32 addr, uint32 mask); void (*address_removed)(conf_object_t *device, uint32 addr, uint32 mask); } i2c_bridge_interface_t;
extern typedef int hap_flags_t;
extern typedef gen_spr_access_type_t ppc_spr_access_type_t;
extern typedef gen_spr_ret_t ppc_spr_ret_t;
extern typedef gen_spr_user_getter_func_t ppc_spr_user_getter_func_t;
extern typedef gen_spr_user_setter_func_t ppc_spr_user_setter_func_t;
extern typedef int pseudo_exceptions_t;
extern typedef void (*recorder_input_handler_t)(conf_object_t *obj, dbuffer_t *data, uint32 uint_data);
