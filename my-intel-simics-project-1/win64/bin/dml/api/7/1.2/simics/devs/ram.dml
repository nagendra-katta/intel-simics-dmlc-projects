/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\devs\ram.h>
%}

import "simics/base/types.dml";
import "simics/base/memory.dml";
import "simics/pywrap.dml";

extern typedef int ram_operation_flags_t;
constant Sim_Ram_Op_Fetch = 1;
constant Sim_Ram_Op_Non_Coherent = 2;
extern typedef struct { page_t *(*get_page)(conf_object_t *obj, physical_address_t addr); void (*fill)(conf_object_t *obj, physical_address_t start, uint64 length, uint8 value); exception_type_t (*read)(conf_object_t *obj, conf_object_t *initiator, uint64 addr, buffer_t data, ram_operation_flags_t flags); exception_type_t (*write)(conf_object_t *obj, conf_object_t *initiator, uint64 addr, bytes_t data, ram_operation_flags_t flags); exception_type_t (*touch)(conf_object_t *obj, conf_object_t *initiator, uint64 addr, uint64 size, read_or_write_t rw, ram_operation_flags_t flags); uint64 (*size)(conf_object_t *obj); } ram_interface_t;
extern typedef ram_interface_t rom_interface_t;
