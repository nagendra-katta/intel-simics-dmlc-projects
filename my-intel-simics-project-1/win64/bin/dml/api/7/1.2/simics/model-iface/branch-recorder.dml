/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\model-iface\branch-recorder.h>
%}

import "simics/base/types.dml";
import "simics/base/attr-value.dml";
import "simics/pywrap.dml";

extern typedef int branch_arc_type_t;
constant Branch_Arc_Branch = 0;
constant Branch_Arc_Exception = 1;
constant Branch_Arc_Exception_Return = 2;
constant Branch_Arc_Max = 3;
extern typedef int branch_recorder_direction_t;
constant BR_Direction_From = 0;
constant BR_Direction_To = 1;
extern typedef struct { uint64 (*next)(addr_prof_iter_t *i); void (*destroy)(addr_prof_iter_t *i); generic_address_t addr; } addr_prof_iter_t;
extern typedef struct { uint64 addr_from; uint64 addr_to; int64 count; branch_arc_type_t type; } branch_arc_t;
extern typedef struct { branch_arc_t *(*next)(branch_arc_iter_t *i); void (*destroy)(branch_arc_iter_t *i); } branch_arc_iter_t;
extern typedef struct { int (*attach_branch_recorder)(conf_object_t *cpu, conf_object_t *brec); int (*detach_branch_recorder)(conf_object_t *cpu, conf_object_t *brec); void (*create_cpu_branch_recorder)(branch_recorder_t *br); void (*destroy_cpu_branch_recorder)(branch_recorder_t *br); void (*delete_arcs)(branch_recorder_t *br); int (*num_branches)(branch_recorder_t *br); attr_value_t (*get_branches)(branch_recorder_t *br); iter_func_t *iter; branch_arc_iter_t *(*iter_branch_arc)(branch_recorder_t *br, generic_address_t start, generic_address_t stop, branch_recorder_direction_t dir); int (*eec_interrupt_instruction)(conf_object_t *cpu, int extype); uint32 granularity_log2; char const **view_descriptions; int num_views; int pa_bits; int va_bits; } branch_recorder_handler_interface_t;
extern typedef struct { } branch_recorder_t;
extern typedef addr_prof_iter_t *(*iter_func_t)(branch_recorder_t *br, generic_address_t start, generic_address_t stop);
