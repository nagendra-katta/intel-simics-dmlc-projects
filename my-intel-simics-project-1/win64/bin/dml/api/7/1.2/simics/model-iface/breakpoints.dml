/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\model-iface\breakpoints.h>
%}

import "simics/base/breakpoints.dml";
import "simics/base/cbdata.dml";
import "simics/base/memory-transaction.dml";
import "simics/pywrap.dml";
import "simics/util/int128.dml";

extern int128 VT_step_stamp(conf_object_t *step_obj);
extern typedef int virtual_breakpoint_flags_t;
constant Virtual_Breakpoint_Flag_Linear = 1;
extern typedef struct { void (*insert_breakpoint)(conf_object_t *object, conf_object_t *caller, breakpoint_handle_t handle, access_t access, generic_address_t start, generic_address_t end); void (*remove_breakpoint)(conf_object_t *object, breakpoint_handle_t handle); breakpoint_info_t (*get_breakpoint)(conf_object_t *obj, breakpoint_handle_t handle); } breakpoint_interface_t;
extern typedef struct { void (*breakpoint_added)(conf_object_t *obj, conf_object_t *bp_obj, breakpoint_handle_t handle); void (*breakpoint_removed)(conf_object_t *obj, conf_object_t *bp_obj, breakpoint_handle_t handle); } breakpoint_change_interface_t;
extern typedef struct { breakpoint_set_t (*get_breakpoints)(conf_object_t *obj, access_t read_write_execute, generic_address_t start, generic_address_t end); } breakpoint_query_v2_interface_t;
extern typedef struct { void (*trigger_breakpoint)(conf_object_t *obj, conf_object_t *initiator_obj, breakpoint_handle_t handle, generic_address_t address, generic_address_t size, access_t access, uint8 *data); } breakpoint_trigger_interface_t;
extern typedef struct { } virtual_data_bp_handle_t;
extern typedef struct { virtual_data_bp_handle_t *(*add_read)(conf_object_t *obj, generic_address_t first, generic_address_t last, void (*callback)(cbdata_call_t data, conf_object_t *initiator, generic_address_t address, uint32 size), cbdata_register_t data, uint32 flags); virtual_data_bp_handle_t *(*add_write)(conf_object_t *obj, generic_address_t first, generic_address_t last, void (*callback)(cbdata_call_t data, conf_object_t *initiator, generic_address_t address, bytes_t value), cbdata_register_t data, uint32 flags); void (*remove)(conf_object_t *obj, virtual_data_bp_handle_t *bp_handle); } virtual_data_breakpoint_interface_t;
extern typedef struct { } virtual_instr_bp_handle_t;
extern typedef struct { virtual_instr_bp_handle_t *(*add)(conf_object_t *obj, generic_address_t first, generic_address_t last, bool (*filter)(cbdata_call_t filter_data, conf_object_t *cpu, bytes_t opcode), cbdata_register_t filter_data, void (*callback)(cbdata_call_t callback_data, conf_object_t *cpu, generic_address_t address, uint32 size), cbdata_register_t callback_data, uint32 flags); void (*remove)(conf_object_t *obj, virtual_instr_bp_handle_t *bp_handle); } virtual_instruction_breakpoint_interface_t;
