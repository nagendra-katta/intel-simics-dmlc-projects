/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\simulator-iface\consoles.h>
%}

import "simics/base/types.dml";
import "simics/pywrap.dml";
import "simics/base/conf-object.dml";
import "simics/model-iface/sim-keys.dml";

extern int VT_get_hide_consoles_flag(void);
extern typedef int text_console_text_attrib_t;
constant Text_Console_Attrib_Bold = 1;
constant Text_Console_Attrib_Underline = 2;
extern typedef int text_console_colour_t;
constant Text_Console_Colour_Black = 0;
constant Text_Console_Colour_Red = 1;
constant Text_Console_Colour_Green = 2;
constant Text_Console_Colour_Yellow = 3;
constant Text_Console_Colour_Blue = 4;
constant Text_Console_Colour_Magenta = 5;
constant Text_Console_Colour_Cyan = 6;
constant Text_Console_Colour_White = 7;
constant Text_Console_Colour_Black_Bright = 8;
constant Text_Console_Colour_Red_Bright = 9;
constant Text_Console_Colour_Green_Bright = 10;
constant Text_Console_Colour_Yellow_Bright = 11;
constant Text_Console_Colour_Blue_Bright = 12;
constant Text_Console_Colour_Magenta_Bright = 13;
constant Text_Console_Colour_Cyan_Bright = 14;
constant Text_Console_Colour_White_Bright = 15;
constant Text_Console_Colour_Cube_16 = 16;
constant Text_Console_Colour_Cube_17 = 17;
constant Text_Console_Colour_Cube_18 = 18;
constant Text_Console_Colour_Cube_19 = 19;
constant Text_Console_Colour_Cube_20 = 20;
constant Text_Console_Colour_Cube_21 = 21;
constant Text_Console_Colour_Cube_22 = 22;
constant Text_Console_Colour_Cube_23 = 23;
constant Text_Console_Colour_Cube_24 = 24;
constant Text_Console_Colour_Cube_25 = 25;
constant Text_Console_Colour_Cube_26 = 26;
constant Text_Console_Colour_Cube_27 = 27;
constant Text_Console_Colour_Cube_28 = 28;
constant Text_Console_Colour_Cube_29 = 29;
constant Text_Console_Colour_Cube_30 = 30;
constant Text_Console_Colour_Cube_31 = 31;
constant Text_Console_Colour_Cube_32 = 32;
constant Text_Console_Colour_Cube_33 = 33;
constant Text_Console_Colour_Cube_34 = 34;
constant Text_Console_Colour_Cube_35 = 35;
constant Text_Console_Colour_Cube_36 = 36;
constant Text_Console_Colour_Cube_37 = 37;
constant Text_Console_Colour_Cube_38 = 38;
constant Text_Console_Colour_Cube_39 = 39;
constant Text_Console_Colour_Cube_40 = 40;
constant Text_Console_Colour_Cube_41 = 41;
constant Text_Console_Colour_Cube_42 = 42;
constant Text_Console_Colour_Cube_43 = 43;
constant Text_Console_Colour_Cube_44 = 44;
constant Text_Console_Colour_Cube_45 = 45;
constant Text_Console_Colour_Cube_46 = 46;
constant Text_Console_Colour_Cube_47 = 47;
constant Text_Console_Colour_Cube_48 = 48;
constant Text_Console_Colour_Cube_49 = 49;
constant Text_Console_Colour_Cube_50 = 50;
constant Text_Console_Colour_Cube_51 = 51;
constant Text_Console_Colour_Cube_52 = 52;
constant Text_Console_Colour_Cube_53 = 53;
constant Text_Console_Colour_Cube_54 = 54;
constant Text_Console_Colour_Cube_55 = 55;
constant Text_Console_Colour_Cube_56 = 56;
constant Text_Console_Colour_Cube_57 = 57;
constant Text_Console_Colour_Cube_58 = 58;
constant Text_Console_Colour_Cube_59 = 59;
constant Text_Console_Colour_Cube_60 = 60;
constant Text_Console_Colour_Cube_61 = 61;
constant Text_Console_Colour_Cube_62 = 62;
constant Text_Console_Colour_Cube_63 = 63;
constant Text_Console_Colour_Cube_64 = 64;
constant Text_Console_Colour_Cube_65 = 65;
constant Text_Console_Colour_Cube_66 = 66;
constant Text_Console_Colour_Cube_67 = 67;
constant Text_Console_Colour_Cube_68 = 68;
constant Text_Console_Colour_Cube_69 = 69;
constant Text_Console_Colour_Cube_70 = 70;
constant Text_Console_Colour_Cube_71 = 71;
constant Text_Console_Colour_Cube_72 = 72;
constant Text_Console_Colour_Cube_73 = 73;
constant Text_Console_Colour_Cube_74 = 74;
constant Text_Console_Colour_Cube_75 = 75;
constant Text_Console_Colour_Cube_76 = 76;
constant Text_Console_Colour_Cube_77 = 77;
constant Text_Console_Colour_Cube_78 = 78;
constant Text_Console_Colour_Cube_79 = 79;
constant Text_Console_Colour_Cube_80 = 80;
constant Text_Console_Colour_Cube_81 = 81;
constant Text_Console_Colour_Cube_82 = 82;
constant Text_Console_Colour_Cube_83 = 83;
constant Text_Console_Colour_Cube_84 = 84;
constant Text_Console_Colour_Cube_85 = 85;
constant Text_Console_Colour_Cube_86 = 86;
constant Text_Console_Colour_Cube_87 = 87;
constant Text_Console_Colour_Cube_88 = 88;
constant Text_Console_Colour_Cube_89 = 89;
constant Text_Console_Colour_Cube_90 = 90;
constant Text_Console_Colour_Cube_91 = 91;
constant Text_Console_Colour_Cube_92 = 92;
constant Text_Console_Colour_Cube_93 = 93;
constant Text_Console_Colour_Cube_94 = 94;
constant Text_Console_Colour_Cube_95 = 95;
constant Text_Console_Colour_Cube_96 = 96;
constant Text_Console_Colour_Cube_97 = 97;
constant Text_Console_Colour_Cube_98 = 98;
constant Text_Console_Colour_Cube_99 = 99;
constant Text_Console_Colour_Cube_100 = 100;
constant Text_Console_Colour_Cube_101 = 101;
constant Text_Console_Colour_Cube_102 = 102;
constant Text_Console_Colour_Cube_103 = 103;
constant Text_Console_Colour_Cube_104 = 104;
constant Text_Console_Colour_Cube_105 = 105;
constant Text_Console_Colour_Cube_106 = 106;
constant Text_Console_Colour_Cube_107 = 107;
constant Text_Console_Colour_Cube_108 = 108;
constant Text_Console_Colour_Cube_109 = 109;
constant Text_Console_Colour_Cube_110 = 110;
constant Text_Console_Colour_Cube_111 = 111;
constant Text_Console_Colour_Cube_112 = 112;
constant Text_Console_Colour_Cube_113 = 113;
constant Text_Console_Colour_Cube_114 = 114;
constant Text_Console_Colour_Cube_115 = 115;
constant Text_Console_Colour_Cube_116 = 116;
constant Text_Console_Colour_Cube_117 = 117;
constant Text_Console_Colour_Cube_118 = 118;
constant Text_Console_Colour_Cube_119 = 119;
constant Text_Console_Colour_Cube_120 = 120;
constant Text_Console_Colour_Cube_121 = 121;
constant Text_Console_Colour_Cube_122 = 122;
constant Text_Console_Colour_Cube_123 = 123;
constant Text_Console_Colour_Cube_124 = 124;
constant Text_Console_Colour_Cube_125 = 125;
constant Text_Console_Colour_Cube_126 = 126;
constant Text_Console_Colour_Cube_127 = 127;
constant Text_Console_Colour_Cube_128 = 128;
constant Text_Console_Colour_Cube_129 = 129;
constant Text_Console_Colour_Cube_130 = 130;
constant Text_Console_Colour_Cube_131 = 131;
constant Text_Console_Colour_Cube_132 = 132;
constant Text_Console_Colour_Cube_133 = 133;
constant Text_Console_Colour_Cube_134 = 134;
constant Text_Console_Colour_Cube_135 = 135;
constant Text_Console_Colour_Cube_136 = 136;
constant Text_Console_Colour_Cube_137 = 137;
constant Text_Console_Colour_Cube_138 = 138;
constant Text_Console_Colour_Cube_139 = 139;
constant Text_Console_Colour_Cube_140 = 140;
constant Text_Console_Colour_Cube_141 = 141;
constant Text_Console_Colour_Cube_142 = 142;
constant Text_Console_Colour_Cube_143 = 143;
constant Text_Console_Colour_Cube_144 = 144;
constant Text_Console_Colour_Cube_145 = 145;
constant Text_Console_Colour_Cube_146 = 146;
constant Text_Console_Colour_Cube_147 = 147;
constant Text_Console_Colour_Cube_148 = 148;
constant Text_Console_Colour_Cube_149 = 149;
constant Text_Console_Colour_Cube_150 = 150;
constant Text_Console_Colour_Cube_151 = 151;
constant Text_Console_Colour_Cube_152 = 152;
constant Text_Console_Colour_Cube_153 = 153;
constant Text_Console_Colour_Cube_154 = 154;
constant Text_Console_Colour_Cube_155 = 155;
constant Text_Console_Colour_Cube_156 = 156;
constant Text_Console_Colour_Cube_157 = 157;
constant Text_Console_Colour_Cube_158 = 158;
constant Text_Console_Colour_Cube_159 = 159;
constant Text_Console_Colour_Cube_160 = 160;
constant Text_Console_Colour_Cube_161 = 161;
constant Text_Console_Colour_Cube_162 = 162;
constant Text_Console_Colour_Cube_163 = 163;
constant Text_Console_Colour_Cube_164 = 164;
constant Text_Console_Colour_Cube_165 = 165;
constant Text_Console_Colour_Cube_166 = 166;
constant Text_Console_Colour_Cube_167 = 167;
constant Text_Console_Colour_Cube_168 = 168;
constant Text_Console_Colour_Cube_169 = 169;
constant Text_Console_Colour_Cube_170 = 170;
constant Text_Console_Colour_Cube_171 = 171;
constant Text_Console_Colour_Cube_172 = 172;
constant Text_Console_Colour_Cube_173 = 173;
constant Text_Console_Colour_Cube_174 = 174;
constant Text_Console_Colour_Cube_175 = 175;
constant Text_Console_Colour_Cube_176 = 176;
constant Text_Console_Colour_Cube_177 = 177;
constant Text_Console_Colour_Cube_178 = 178;
constant Text_Console_Colour_Cube_179 = 179;
constant Text_Console_Colour_Cube_180 = 180;
constant Text_Console_Colour_Cube_181 = 181;
constant Text_Console_Colour_Cube_182 = 182;
constant Text_Console_Colour_Cube_183 = 183;
constant Text_Console_Colour_Cube_184 = 184;
constant Text_Console_Colour_Cube_185 = 185;
constant Text_Console_Colour_Cube_186 = 186;
constant Text_Console_Colour_Cube_187 = 187;
constant Text_Console_Colour_Cube_188 = 188;
constant Text_Console_Colour_Cube_189 = 189;
constant Text_Console_Colour_Cube_190 = 190;
constant Text_Console_Colour_Cube_191 = 191;
constant Text_Console_Colour_Cube_192 = 192;
constant Text_Console_Colour_Cube_193 = 193;
constant Text_Console_Colour_Cube_194 = 194;
constant Text_Console_Colour_Cube_195 = 195;
constant Text_Console_Colour_Cube_196 = 196;
constant Text_Console_Colour_Cube_197 = 197;
constant Text_Console_Colour_Cube_198 = 198;
constant Text_Console_Colour_Cube_199 = 199;
constant Text_Console_Colour_Cube_200 = 200;
constant Text_Console_Colour_Cube_201 = 201;
constant Text_Console_Colour_Cube_202 = 202;
constant Text_Console_Colour_Cube_203 = 203;
constant Text_Console_Colour_Cube_204 = 204;
constant Text_Console_Colour_Cube_205 = 205;
constant Text_Console_Colour_Cube_206 = 206;
constant Text_Console_Colour_Cube_207 = 207;
constant Text_Console_Colour_Cube_208 = 208;
constant Text_Console_Colour_Cube_209 = 209;
constant Text_Console_Colour_Cube_210 = 210;
constant Text_Console_Colour_Cube_211 = 211;
constant Text_Console_Colour_Cube_212 = 212;
constant Text_Console_Colour_Cube_213 = 213;
constant Text_Console_Colour_Cube_214 = 214;
constant Text_Console_Colour_Cube_215 = 215;
constant Text_Console_Colour_Cube_216 = 216;
constant Text_Console_Colour_Cube_217 = 217;
constant Text_Console_Colour_Cube_218 = 218;
constant Text_Console_Colour_Cube_219 = 219;
constant Text_Console_Colour_Cube_220 = 220;
constant Text_Console_Colour_Cube_221 = 221;
constant Text_Console_Colour_Cube_222 = 222;
constant Text_Console_Colour_Cube_223 = 223;
constant Text_Console_Colour_Cube_224 = 224;
constant Text_Console_Colour_Cube_225 = 225;
constant Text_Console_Colour_Cube_226 = 226;
constant Text_Console_Colour_Cube_227 = 227;
constant Text_Console_Colour_Cube_228 = 228;
constant Text_Console_Colour_Cube_229 = 229;
constant Text_Console_Colour_Cube_230 = 230;
constant Text_Console_Colour_Cube_231 = 231;
constant Text_Console_Colour_Grey_232 = 232;
constant Text_Console_Colour_Grey_233 = 233;
constant Text_Console_Colour_Grey_234 = 234;
constant Text_Console_Colour_Grey_235 = 235;
constant Text_Console_Colour_Grey_236 = 236;
constant Text_Console_Colour_Grey_237 = 237;
constant Text_Console_Colour_Grey_238 = 238;
constant Text_Console_Colour_Grey_239 = 239;
constant Text_Console_Colour_Grey_240 = 240;
constant Text_Console_Colour_Grey_241 = 241;
constant Text_Console_Colour_Grey_242 = 242;
constant Text_Console_Colour_Grey_243 = 243;
constant Text_Console_Colour_Grey_244 = 244;
constant Text_Console_Colour_Grey_245 = 245;
constant Text_Console_Colour_Grey_246 = 246;
constant Text_Console_Colour_Grey_247 = 247;
constant Text_Console_Colour_Grey_248 = 248;
constant Text_Console_Colour_Grey_249 = 249;
constant Text_Console_Colour_Grey_250 = 250;
constant Text_Console_Colour_Grey_251 = 251;
constant Text_Console_Colour_Grey_252 = 252;
constant Text_Console_Colour_Grey_253 = 253;
constant Text_Console_Colour_Grey_254 = 254;
constant Text_Console_Colour_Grey_255 = 255;
constant Text_Console_Colour_Default_Foreground = 256;
constant Text_Console_Colour_Default_Background = 257;
extern typedef int text_console_key_t;
constant Text_Console_Key_Tab = 9;
constant Text_Console_Key_Return = 13;
constant Text_Console_Key_Escape = 27;
constant Text_Console_Key_Backspace = 128;
constant Text_Console_Key_Left = 129;
constant Text_Console_Key_Up = 130;
constant Text_Console_Key_Right = 131;
constant Text_Console_Key_Down = 132;
constant Text_Console_Key_Home = 133;
constant Text_Console_Key_End = 134;
constant Text_Console_Key_Ins = 135;
constant Text_Console_Key_Del = 136;
constant Text_Console_Key_Pgup = 137;
constant Text_Console_Key_Pgdn = 138;
constant Text_Console_Key_F1 = 139;
constant Text_Console_Key_F2 = 140;
constant Text_Console_Key_F3 = 141;
constant Text_Console_Key_F4 = 142;
constant Text_Console_Key_F5 = 143;
constant Text_Console_Key_F6 = 144;
constant Text_Console_Key_F7 = 145;
constant Text_Console_Key_F8 = 146;
constant Text_Console_Key_F9 = 147;
constant Text_Console_Key_F10 = 148;
constant Text_Console_Key_F11 = 149;
constant Text_Console_Key_F12 = 150;
constant Text_Console_Key_KP_0 = 151;
constant Text_Console_Key_KP_1 = 152;
constant Text_Console_Key_KP_2 = 153;
constant Text_Console_Key_KP_3 = 154;
constant Text_Console_Key_KP_4 = 155;
constant Text_Console_Key_KP_5 = 156;
constant Text_Console_Key_KP_6 = 157;
constant Text_Console_Key_KP_7 = 158;
constant Text_Console_Key_KP_8 = 159;
constant Text_Console_Key_KP_9 = 160;
constant Text_Console_Key_KP_Plus = 161;
constant Text_Console_Key_KP_Minus = 162;
constant Text_Console_Key_KP_Mul = 163;
constant Text_Console_Key_KP_Div = 164;
constant Text_Console_Key_KP_Dot = 165;
constant Text_Console_Key_KP_Enter = 166;
extern typedef int text_console_modifier_t;
constant Text_Console_Modifier_Alt = 1;
constant Text_Console_Modifier_Ctrl = 2;
constant Text_Console_Modifier_Shift = 4;
extern typedef int gfx_console_led_t;
constant Gfx_Console_Led_None = 0;
constant Gfx_Console_Led_Caps = 1;
constant Gfx_Console_Led_Num = 2;
constant Gfx_Console_Led_Scroll = 4;
extern typedef int gfx_console_mouse_button_t;
constant Gfx_Console_Mouse_Button_Left = 1;
constant Gfx_Console_Mouse_Button_Right = 2;
constant Gfx_Console_Mouse_Button_Middle = 4;
extern typedef int winsome_update_type_t;
constant Winsome_Update_Nothing = 0;
constant Winsome_Update_Text_Cursor = 1;
constant Winsome_Update_Append = 2;
constant Winsome_Update_Refresh = 3;
constant Winsome_Update_Gfx = 4;
constant Winsome_Update_Resize = 5;
constant Winsome_Update_Activity = 6;
extern typedef struct { void (*write)(conf_object_t *obj, uint8 value); } serial_console_frontend_interface_t;
extern typedef struct { void (*input_str)(conf_object_t *obj, char const *str); void (*input_data)(conf_object_t *obj, bytes_t data); } con_input_interface_t;
extern typedef struct { void (*input)(conf_object_t *obj, sim_key_t code, bool down); } con_input_code_interface_t;
extern typedef struct { int64 (*add)(conf_object_t *obj, char const *str, break_string_cb_t cb, lang_void *arg); int64 (*add_single)(conf_object_t *obj, char const *str, break_string_cb_t cb, lang_void *arg); void (*remove)(conf_object_t *obj, int64 bp_id); } break_strings_interface_t;
extern typedef struct { int64 (*add)(conf_object_t *obj, char const *str, break_string_cb_t cb, lang_void *arg); int64 (*add_single)(conf_object_t *obj, char const *str, break_string_cb_t cb, lang_void *arg); int64 (*add_regexp)(conf_object_t *obj, char const *str, break_string_cb_t cb, lang_void *arg); void (*remove)(conf_object_t *obj, int64 bp_id); } break_strings_v2_interface_t;
extern typedef struct { uint32 magic; uint32 format; uint64 bytes; uint32 minx; uint32 miny; uint32 maxx; uint32 maxy; } gbp_header_t;
extern typedef struct { bool (*store)(conf_object_t *obj, char const *file, int minx, int miny, int maxx, int maxy); int64 (*add)(conf_object_t *obj, char const *file, char const *name, bool oneshot, double interval, gfx_break_cb_t cb, lang_void *arg); bool (*remove)(conf_object_t *obj, int64 break_id); int (*match)(conf_object_t *obj, char const *file); gbp_header_t (*info)(conf_object_t *obj, char const *file); bool (*export_png)(conf_object_t *obj, char const *file, char const *png_file); int64 (*add_bytes)(conf_object_t *obj, bytes_t data, char const *name, bool oneshot, double interval, gfx_break_cb_t cb, lang_void *arg); } gfx_break_interface_t;
extern typedef struct { bool (*listening)(conf_object_t *obj); bool (*connected)(conf_object_t *obj); void (*disconnect)(conf_object_t *obj); } telnet_connection_v2_interface_t;
extern typedef struct { bool (*listening)(conf_object_t *obj); int (*num_clients)(conf_object_t *obj); void (*disconnect)(conf_object_t *obj); } vnc_server_v2_interface_t;
extern typedef struct { bool (*setup)(conf_object_t *obj, char const *name); char const *(*name)(conf_object_t *obj); void (*shutdown)(conf_object_t *obj); } host_serial_interface_t;
extern typedef struct { bool (*save_png)(conf_object_t *obj, char const *filename); bool (*save_bmp)(conf_object_t *obj, char const *filename); } screenshot_interface_t;
extern typedef struct { uint8 attrib; uint16 fg; uint16 bg; } text_console_attrib_t;
extern typedef struct { int (*start)(conf_object_t *obj, conf_object_t *backend); void (*stop)(conf_object_t *obj, int handle); void (*set_title)(conf_object_t *obj, int handle, char const *short_title, char const *long_title); void (*set_size)(conf_object_t *obj, int handle, int width, int height); void (*set_max_scrollback_size)(conf_object_t *obj, int handle, int num_lines); void (*set_default_colours)(conf_object_t *obj, int handle, uint32 default_fg_col, uint32 default_bg_col); void (*set_visible)(conf_object_t *obj, int handle, bool visible); void (*set_contents)(conf_object_t *obj, int handle, int top, int left, int bottom, int right, char const *text, text_console_attrib_t const *attrib); void (*set_cursor_pos)(conf_object_t *obj, int handle, int row, int col); void (*append_text)(conf_object_t *obj, int handle, int num_lines, char const *text, text_console_attrib_t const *attrib); void (*refresh_screen)(conf_object_t *obj, int handle, char const *text, text_console_attrib_t const *attrib, char const *sb_text, text_console_attrib_t const *sb_attrib, int scrollback_size); } text_console_frontend_interface_t;
extern typedef struct { void (*input)(conf_object_t *obj, text_console_key_t key, text_console_modifier_t modifiers); void (*request_refresh)(conf_object_t *obj); void (*set_visible)(conf_object_t *obj, bool visible); int (*line_length)(conf_object_t *obj, int line_num); bool (*line_wrap)(conf_object_t *obj, int line_num); void (*set_size)(conf_object_t *obj, int width, int height); void (*set_default_colours)(conf_object_t *obj, uint32 default_fg_col, uint32 default_bg_col); } text_console_backend_interface_t;
extern typedef struct { int (*start)(conf_object_t *obj, conf_object_t *backend); void (*stop)(conf_object_t *obj, int handle); void (*set_title)(conf_object_t *obj, int handle, char const *short_title, char const *long_title); void (*set_size)(conf_object_t *obj, int handle, int width, int height); void (*set_visible)(conf_object_t *obj, int handle, bool visible); void (*set_contents)(conf_object_t *obj, int handle, int left, int top, int right, int bottom, uint32 const *data); void (*invalidate_contents)(conf_object_t *obj, int handle); void (*set_text_mode)(conf_object_t *obj, int handle, bool text_mode); void (*signal_text_update)(conf_object_t *obj, int handle); void (*set_grab_mode)(conf_object_t *obj, int handle, bool active); void (*set_mouse_pos)(conf_object_t *obj, int handle, int x, int y); void (*set_keyboard_leds)(conf_object_t *obj, int handle, gfx_console_led_t led_state); void (*set_grab_modifier)(conf_object_t *obj, int handle, sim_key_t modifier); void (*set_grab_button)(conf_object_t *obj, int handle, gfx_console_mouse_button_t button); } gfx_console_frontend_interface_t;
extern typedef struct { bytes_t text; int rows; int columns; int font_width; int font_height; bytes_t line_lengths; } gfx_console_screen_text_t;
extern typedef struct { void (*kbd_event)(conf_object_t *obj, sim_key_t code, bool down); void (*mouse_event)(conf_object_t *obj, int x, int y, int z, gfx_console_mouse_button_t buttons); void (*request_refresh)(conf_object_t *obj); void (*set_visible)(conf_object_t *obj, bool visible); gfx_console_screen_text_t (*text_data)(conf_object_t *obj); void (*got_grab_keys)(conf_object_t *obj); } gfx_console_backend_interface_t;
extern typedef struct { winsome_update_type_t type; struct { struct { char *text; text_console_attrib_t *attrib; int left; int right; int top; int bottom; int cursor_x; int cursor_y; } text; struct { uint64 num_lines; char *text; text_console_attrib_t *attrib; uint64 text_len; int cursor_x; int cursor_y; } sb; struct { char *text; text_console_attrib_t *attrib; char *sb_text; text_console_attrib_t *sb_attrib; int width; int height; int sb_size; int cursor_x; int cursor_y; } refresh; struct { int width; int height; } resize; struct { uint32 *data; int left; int right; int top; int bottom; int width; int height; bool text_mode; } gfx; } u; } winsome_update_t;
extern typedef struct { void (*gfx)(conf_object_t *obj, lang_void *console, int left, int right, int top, int bottom, bytes_t data, bool text_mode); void (*resize)(conf_object_t *obj, lang_void *console, int width, int height); void (*refresh)(conf_object_t *obj, lang_void *console, bytes_t text, bytes_t attrib, bytes_t sb_text, bytes_t sb_attrib, int sb_size, int cursor_x, int cursor_y); void (*append)(conf_object_t *obj, lang_void *console, uint64 num_lines, bytes_t text, bytes_t attrib, int cursor_x, int cursor_y); void (*text)(conf_object_t *obj, lang_void *console, int left, int right, int top, int bottom, bytes_t text, bytes_t attrib, int cursor_x, int cursor_y); void (*activity)(conf_object_t *obj, lang_void *console); } winsome_console_interface_t;
extern typedef struct { void (*start)(conf_object_t *obj, lang_void *console); void (*stop)(conf_object_t *obj); } gui_console_backend_interface_t;
extern typedef int (*break_string_cb_t)(conf_object_t *obj, char const *str, int64 break_id, lang_void *arg);
extern typedef int (*gfx_break_cb_t)(conf_object_t *obj, int64 break_id, lang_void *arg);
