/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\simulator\memory.h>
%}

import "simics/base/types.dml";

extern physical_address_t SIM_load_binary(conf_object_t *obj, char const *file, physical_address_t offset, bool use_pa, bool verbose);
extern void SIM_load_file(conf_object_t *obj, char const *file, physical_address_t paddr, bool verbose);
extern uint8 SIM_read_byte(conf_object_t *obj, generic_address_t paddr);
extern uint64 SIM_read_phys_memory(conf_object_t *cpu, physical_address_t paddr, int length);
extern uint64 SIM_read_phys_memory_tags(conf_object_t *mem_space, physical_address_t paddr, uint32 ntags);
extern void SIM_write_byte(conf_object_t *obj, generic_address_t paddr, uint8 value);
extern void SIM_write_phys_memory(conf_object_t *cpu, physical_address_t paddr, uint64 value, int length);
extern void SIM_write_phys_memory_tags(conf_object_t *mem_space, physical_address_t paddr, uint64 tag_bits, uint32 ntags);
