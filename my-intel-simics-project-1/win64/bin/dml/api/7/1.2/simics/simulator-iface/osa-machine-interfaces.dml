/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\simulator-iface\osa-machine-interfaces.h>
%}

import "simics/device-api.dml";
import "simics/simulator-api.dml";

extern typedef int osa_read_len_t;
constant OSA_Read_One_Byte = 1;
constant OSA_Read_Two_Byte = 2;
constant OSA_Read_Four_Byte = 4;
constant OSA_Read_Eight_Byte = 8;
extern typedef struct { cancel_id_t (*notify_mode_change)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, void (*cb)(cbdata_call_t data, conf_object_t *cpu, processor_mode_t old_mode, processor_mode_t new_mode), cbdata_register_t data); cancel_id_t (*notify_exception)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, int exc_num, void (*cb)(cbdata_call_t data, conf_object_t *cpu, int exc_num), cbdata_register_t data); cancel_id_t (*notify_control_reg)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, int reg_num, void (*cb)(cbdata_call_t data, conf_object_t *cpu, int reg_num, uint64 value), cbdata_register_t data); cancel_id_t (*notify_exec_breakpoint)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, uint64 address, uint64 len, bool virt, void (*cb)(cbdata_call_t data, conf_object_t *cpu, uint64 address), cbdata_register_t data); cancel_id_t (*notify_read_breakpoint)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, uint64 address, uint32 len, bool virt, void (*cb)(cbdata_call_t data, conf_object_t *cpu, uint64 address, uint32 len), cbdata_register_t data); cancel_id_t (*notify_write_breakpoint)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, uint64 address, uint32 len, bool virt, void (*cb)(cbdata_call_t data, conf_object_t *cpu, uint64 address, uint32 len, uint64 old_val, uint64 new_val), cbdata_register_t data); void (*cancel)(conf_object_t *obj, conf_object_t *tracker, cancel_id_t cancel_id); cancel_id_t (*notify_control_reg_read)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, int reg_num, void (*cb)(cbdata_call_t data, conf_object_t *cpu, int reg_num), cbdata_register_t data); } osa_machine_notification_interface_t;
extern typedef struct { uint64 (*read_register)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, int reg); int (*get_register_number)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, char const *reg); attr_value_t (*read_phys_memory)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, physical_address_t addr, osa_read_len_t len); attr_value_t (*read_phys_bytes)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, physical_address_t paddr, uint32 len); attr_value_t (*virtual_to_physical)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, uint64 vaddr); processor_mode_t (*cpu_mode)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu); attr_value_t (*get_all_processors)(conf_object_t *obj, conf_object_t *tracker); int (*get_exception_number)(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, char const *name); } osa_machine_query_interface_t;
