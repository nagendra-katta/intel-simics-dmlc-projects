/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\devs\usb.h>
%}

import "simics/base/types.dml";
import "simics/base/time.dml";
import "simics/util/dbuffer.dml";
import "simics/pywrap.dml";

extern typedef int usb_transfer_completion_t;
constant USB_Transfer_Completed = 0;
constant USB_Transfer_Not_Ready = 1;
extern typedef int usb_direction_t;
constant USB_Direction_None = 0;
constant USB_Direction_In = 1;
constant USB_Direction_Out = 2;
extern typedef int usb_status_t;
constant USB_Status_Undef = 0;
constant USB_Status_Ack = 1;
constant USB_Status_Nak = 2;
constant USB_Status_Stall = 3;
extern typedef int usb_type_t;
constant USB_Type_Control = 0;
constant USB_Type_Interrupt = 1;
constant USB_Type_Isochronous = 2;
constant USB_Type_Bulk = 3;
extern typedef int usb_speed_t;
constant USB_Speed_Low = 0;
constant USB_Speed_Full = 1;
constant USB_Speed_High = 2;
extern typedef struct { uint8 bmRequestType; uint8 bRequest; uint16 wValue; uint16 wIndex; uint16 wLength; } usb_device_request_t;
extern typedef struct { uint8 function_address; uint8 endpoint_number; usb_type_t type; struct { usb_device_request_t control_request; nano_secs_t periodic_time; } u; usb_direction_t direction; int size; dbuffer_t *buf; usb_status_t status; } usb_transfer_t;
extern typedef struct { usb_transfer_completion_t (*submit_transfer)(conf_object_t *dev_obj, usb_transfer_t *transfer); void (*abort_transfer)(conf_object_t *dev_obj, usb_transfer_t *transfer); void (*reset)(conf_object_t *dev_obj); } usb_device_interface_t;
extern typedef struct { int (*connect_device)(conf_object_t *bus_obj, conf_object_t *dev_obj, usb_speed_t speed); int (*disconnect_device)(conf_object_t *bus_obj, conf_object_t *dev_obj); void (*complete_transfer)(conf_object_t *bus_obj, conf_object_t *dev_obj, usb_transfer_t *transfer); } usb_interface_t;
