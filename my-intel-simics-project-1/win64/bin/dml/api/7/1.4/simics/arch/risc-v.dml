/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\arch\risc-v.h>
%}

import "simics/base/transaction.dml";
import "simics/processor/types.dml";
import "simics/pywrap.dml";

extern uint64 ATOM_get_transaction_riscv_device_id(transaction_t const *t);
extern riscv_io_error_ret_t *ATOM_get_transaction_riscv_io_error_ret(transaction_t const *t);
extern uint64 ATOM_get_transaction_riscv_process_id(transaction_t const *t);
extern uint64 ATOM_get_transaction_riscv_wg_wid(transaction_t const *t);
extern atom_t ATOM_riscv_device_id(uint64 val);
extern atom_t ATOM_riscv_io_error_ret(riscv_io_error_ret_t *val);
extern atom_t ATOM_riscv_process_id(uint64 val);
extern atom_t ATOM_riscv_wg_wid(uint64 val);
extern uint64 const *ATOM_transaction_riscv_device_id(transaction_t const *t);
extern riscv_io_error_ret_t const **ATOM_transaction_riscv_io_error_ret(transaction_t const *t);
extern uint64 const *ATOM_transaction_riscv_process_id(transaction_t const *t);
extern uint64 const *ATOM_transaction_riscv_wg_wid(transaction_t const *t);
extern atom_t pywrap_atom_from_riscv_device_id(uint64 val);
extern atom_t pywrap_atom_from_riscv_io_error_ret(riscv_io_error_ret_t *val);
extern atom_t pywrap_atom_from_riscv_process_id(uint64 val);
extern atom_t pywrap_atom_from_riscv_wg_wid(uint64 val);
extern uint64 pywrap_riscv_device_id_from_atom(atom_t *a);
extern riscv_io_error_ret_t *pywrap_riscv_io_error_ret_from_atom(atom_t *a);
extern uint64 pywrap_riscv_process_id_from_atom(atom_t *a);
extern uint64 pywrap_riscv_wg_wid_from_atom(atom_t *a);
extern typedef int riscv_cpu_mode_t;
constant Riscv_Mode_User = 0;
constant Riscv_Mode_Supervisor = 1;
constant Riscv_Mode_Reserved = 2;
constant Riscv_Mode_Machine = 3;
constant Riscv_Mode_Guest_User = 16;
constant Riscv_Mode_Guest_Supervisor = 17;
extern typedef int riscv_imsic_file_id_t;
extern riscv_imsic_file_id_t Riscv_Imsic_Machine_File;
constant Riscv_Imsic_Supervisor_File = 0;
extern typedef int riscv_vectoring_mode_t;
constant Riscv_Non_Vectoring = 0;
constant Riscv_Selective_Hardware_Vectoring = 1;
extern typedef int riscv_io_error_t;
constant Riscv_No_IO_Error = 0;
constant Riscv_Clint_Wrong_Sized_Access = 16;
extern typedef struct { uint64 (*read_register)(conf_object_t *obj, uint64 number); void (*write_register)(conf_object_t *obj, uint64 number, uint64 value); } riscv_coprocessor_interface_t;
extern typedef struct { uint32 (*num_guest_files)(conf_object_t *obj); uint64 (*read_irq_file)(conf_object_t *obj, riscv_imsic_file_id_t id, uint32 offset); uint64 (*read_and_write_irq_file)(conf_object_t *obj, riscv_imsic_file_id_t id, uint32 offset, uint64 new_value, uint64 mask); uint64 (*read_xtopei)(conf_object_t *obj, riscv_imsic_file_id_t id); uint64 (*read_and_write_xtopei)(conf_object_t *obj, riscv_imsic_file_id_t id, uint64 value, uint64 mask); } riscv_imsic_interface_t;
extern typedef struct { void (*signal_raise)(conf_object_t *obj, uint64 vgein); void (*signal_lower)(conf_object_t *obj, uint64 vgein); } riscv_signal_sgeip_interface_t;
extern typedef struct { void (*set_active_interrupt)(conf_object_t *obj, uint64 id, uint64 level, riscv_vectoring_mode_t vect_mode, riscv_cpu_mode_t cpu_mode); void (*clear_interrupt)(conf_object_t *obj); } riscv_clic_interrupt_interface_t;
extern typedef struct { void (*acknowledge_interrupt)(conf_object_t *obj, uint64 id); } riscv_clic_interface_t;
extern typedef struct { riscv_io_error_t val; } riscv_io_error_ret_t;
