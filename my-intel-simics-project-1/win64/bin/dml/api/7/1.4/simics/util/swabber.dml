/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\util\swabber.h>
%}

import "simics/host-info.dml";
import "simics/base-types.dml";

extern uint16 generic_loadswab16(uint16 const *p);
extern uint32 generic_loadswab32(uint32 const *p);
extern uint64 generic_loadswab64(uint64 const *p);
extern void generic_storeswab16(uint16 *p, uint16 x);
extern void generic_storeswab32(uint32 *p, uint32 x);
extern void generic_storeswab64(uint64 *p, uint64 x);
extern uint16 generic_swab16(uint16 x);
extern uint32 generic_swab32(uint32 x);
extern uint64 generic_swab64(uint64 x);
extern uint16 generic_unaligned_load_be16(void const *p);
extern uint32 generic_unaligned_load_be32(void const *p);
extern uint64 generic_unaligned_load_be64(void const *p);
extern uint16 generic_unaligned_load_le16(void const *p);
extern uint32 generic_unaligned_load_le32(void const *p);
extern uint64 generic_unaligned_load_le64(void const *p);
extern void generic_unaligned_store_be16(void *p, uint16 x);
extern void generic_unaligned_store_be32(void *p, uint32 x);
extern void generic_unaligned_store_be64(void *p, uint64 x);
extern void generic_unaligned_store_le16(void *p, uint16 x);
extern void generic_unaligned_store_le32(void *p, uint32 x);
extern void generic_unaligned_store_le64(void *p, uint64 x);
extern uint16 identity16(uint16 x);
extern uint32 identity32(uint32 x);
extern uint64 identity64(uint64 x);
extern uint8 identity8(uint8 x);
extern uint16 reverse_bits16(uint16 x);
extern uint32 reverse_bits32(uint32 x);
extern uint64 reverse_bits64(uint64 x);
extern uint8 reverse_bits8(uint8 x);
extern uint16 straight_load16(uint16 const *p);
extern uint32 straight_load32(uint32 const *p);
extern uint64 straight_load64(uint64 const *p);
extern uint8 straight_load8(uint8 const *p);
extern void straight_store16(uint16 *p, uint16 x);
extern void straight_store32(uint32 *p, uint32 x);
extern void straight_store64(uint64 *p, uint64 x);
extern void straight_store8(uint8 *p, uint8 x);
extern uint32 swab32(uint32 x);
extern uint64 swab64(uint64 x);
extern uint16 unaligned_load16(void const *p);
extern uint32 unaligned_load32(void const *p);
extern uint64 unaligned_load64(void const *p);
extern uint8 unaligned_load8(void const *p);
extern void unaligned_store16(void *p, uint16 x);
extern void unaligned_store32(void *p, uint32 x);
extern void unaligned_store64(void *p, uint64 x);
extern void unaligned_store8(void *p, uint8 x);
