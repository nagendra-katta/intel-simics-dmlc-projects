/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\devs\pci.h>
%}

import "simics/base/types.dml";
import "simics/base/memory-transaction.dml";
import "simics/base/transaction.dml";
import "simics/pywrap.dml";

extern pcie_at_t ATOM_get_transaction_pcie_at(transaction_t const *t);
extern uint8 ATOM_get_transaction_pcie_ats_invalidate_completion_count(transaction_t const *t);
extern uint32 ATOM_get_transaction_pcie_ats_invalidate_completion_itag_vector(transaction_t const *t);
extern uint8 ATOM_get_transaction_pcie_ats_invalidate_request_itag(transaction_t const *t);
extern bool ATOM_get_transaction_pcie_ats_translation_request_cxl_src(transaction_t const *t);
extern bool ATOM_get_transaction_pcie_ats_translation_request_no_write(transaction_t const *t);
extern pcie_byte_count_ret_t *ATOM_get_transaction_pcie_byte_count_ret(transaction_t const *t);
extern uint8 ATOM_get_transaction_pcie_destination_segment(transaction_t const *t);
extern uint16 ATOM_get_transaction_pcie_device_id(transaction_t const *t);
extern pcie_ecs_t ATOM_get_transaction_pcie_ecs(transaction_t const *t);
extern pcie_error_ret_t *ATOM_get_transaction_pcie_error_ret(transaction_t const *t);
extern pcie_ide_secured_t *ATOM_get_transaction_pcie_ide_secured(transaction_t const *t);
extern pcie_link_negotiation_t *ATOM_get_transaction_pcie_link_negotiation(transaction_t const *t);
extern pcie_msg_route_t ATOM_get_transaction_pcie_msg_route(transaction_t const *t);
extern pcie_message_type_t ATOM_get_transaction_pcie_msg_type(transaction_t const *t);
extern uint32 ATOM_get_transaction_pcie_pasid(transaction_t const *t);
extern uint16 ATOM_get_transaction_pcie_prs_page_group_response(transaction_t const *t);
extern uint64 ATOM_get_transaction_pcie_prs_page_request(transaction_t const *t);
extern bool ATOM_get_transaction_pcie_prs_stop_marker(transaction_t const *t);
extern uint16 ATOM_get_transaction_pcie_requester_id(transaction_t const *t);
extern uint8 ATOM_get_transaction_pcie_requester_segment(transaction_t const *t);
extern pcie_type_t ATOM_get_transaction_pcie_type(transaction_t const *t);
extern atom_t ATOM_pcie_at(pcie_at_t val);
extern atom_t ATOM_pcie_ats_invalidate_completion_count(uint8 val);
extern atom_t ATOM_pcie_ats_invalidate_completion_itag_vector(uint32 val);
extern atom_t ATOM_pcie_ats_invalidate_request_itag(uint8 val);
extern atom_t ATOM_pcie_ats_translation_request_cxl_src(bool val);
extern atom_t ATOM_pcie_ats_translation_request_no_write(bool val);
extern atom_t ATOM_pcie_byte_count_ret(pcie_byte_count_ret_t *val);
extern atom_t ATOM_pcie_destination_segment(uint8 val);
extern atom_t ATOM_pcie_device_id(uint16 val);
extern atom_t ATOM_pcie_ecs(pcie_ecs_t val);
extern atom_t ATOM_pcie_error_ret(pcie_error_ret_t *val);
extern atom_t ATOM_pcie_ide_secured(pcie_ide_secured_t *val);
extern atom_t ATOM_pcie_link_negotiation(pcie_link_negotiation_t *val);
extern atom_t ATOM_pcie_msg_route(pcie_msg_route_t val);
extern atom_t ATOM_pcie_msg_type(pcie_message_type_t val);
extern atom_t ATOM_pcie_pasid(uint32 val);
extern atom_t ATOM_pcie_prs_page_group_response(uint16 val);
extern atom_t ATOM_pcie_prs_page_request(uint64 val);
extern atom_t ATOM_pcie_prs_stop_marker(bool val);
extern atom_t ATOM_pcie_requester_id(uint16 val);
extern atom_t ATOM_pcie_requester_segment(uint8 val);
extern atom_t ATOM_pcie_type(pcie_type_t val);
extern pcie_at_t const *ATOM_transaction_pcie_at(transaction_t const *t);
extern uint8 const *ATOM_transaction_pcie_ats_invalidate_completion_count(transaction_t const *t);
extern uint32 const *ATOM_transaction_pcie_ats_invalidate_completion_itag_vector(transaction_t const *t);
extern uint8 const *ATOM_transaction_pcie_ats_invalidate_request_itag(transaction_t const *t);
extern bool const *ATOM_transaction_pcie_ats_translation_request_cxl_src(transaction_t const *t);
extern bool const *ATOM_transaction_pcie_ats_translation_request_no_write(transaction_t const *t);
extern pcie_byte_count_ret_t const **ATOM_transaction_pcie_byte_count_ret(transaction_t const *t);
extern uint8 const *ATOM_transaction_pcie_destination_segment(transaction_t const *t);
extern uint16 const *ATOM_transaction_pcie_device_id(transaction_t const *t);
extern pcie_ecs_t const *ATOM_transaction_pcie_ecs(transaction_t const *t);
extern pcie_error_ret_t const **ATOM_transaction_pcie_error_ret(transaction_t const *t);
extern pcie_ide_secured_t const **ATOM_transaction_pcie_ide_secured(transaction_t const *t);
extern pcie_link_negotiation_t const **ATOM_transaction_pcie_link_negotiation(transaction_t const *t);
extern pcie_msg_route_t const *ATOM_transaction_pcie_msg_route(transaction_t const *t);
extern pcie_message_type_t const *ATOM_transaction_pcie_msg_type(transaction_t const *t);
extern uint32 const *ATOM_transaction_pcie_pasid(transaction_t const *t);
extern uint16 const *ATOM_transaction_pcie_prs_page_group_response(transaction_t const *t);
extern uint64 const *ATOM_transaction_pcie_prs_page_request(transaction_t const *t);
extern bool const *ATOM_transaction_pcie_prs_stop_marker(transaction_t const *t);
extern uint16 const *ATOM_transaction_pcie_requester_id(transaction_t const *t);
extern uint8 const *ATOM_transaction_pcie_requester_segment(transaction_t const *t);
extern pcie_type_t const *ATOM_transaction_pcie_type(transaction_t const *t);
extern pci_memory_transaction_t *SIM_pci_mem_trans_from_generic(generic_transaction_t *mop);
extern uint16 VT_get_pci_mem_op_requester_id(pci_memory_transaction_t const *mop);
extern uint32 VT_get_pci_mem_op_tlp_prefix(pci_memory_transaction_t const *mop);
extern void VT_set_pci_mem_op_tlp_prefix(pci_memory_transaction_t *mop, uint32 tlp_prefix);
extern atom_t pywrap_atom_from_pcie_at(pcie_at_t val);
extern atom_t pywrap_atom_from_pcie_ats_invalidate_completion_count(uint8 val);
extern atom_t pywrap_atom_from_pcie_ats_invalidate_completion_itag_vector(uint32 val);
extern atom_t pywrap_atom_from_pcie_ats_invalidate_request_itag(uint8 val);
extern atom_t pywrap_atom_from_pcie_ats_translation_request_cxl_src(bool val);
extern atom_t pywrap_atom_from_pcie_ats_translation_request_no_write(bool val);
extern atom_t pywrap_atom_from_pcie_byte_count_ret(pcie_byte_count_ret_t *val);
extern atom_t pywrap_atom_from_pcie_destination_segment(uint8 val);
extern atom_t pywrap_atom_from_pcie_device_id(uint16 val);
extern atom_t pywrap_atom_from_pcie_ecs(pcie_ecs_t val);
extern atom_t pywrap_atom_from_pcie_error_ret(pcie_error_ret_t *val);
extern atom_t pywrap_atom_from_pcie_ide_secured(pcie_ide_secured_t *val);
extern atom_t pywrap_atom_from_pcie_link_negotiation(pcie_link_negotiation_t *val);
extern atom_t pywrap_atom_from_pcie_msg_route(pcie_msg_route_t val);
extern atom_t pywrap_atom_from_pcie_msg_type(pcie_message_type_t val);
extern atom_t pywrap_atom_from_pcie_pasid(uint32 val);
extern atom_t pywrap_atom_from_pcie_prs_page_group_response(uint16 val);
extern atom_t pywrap_atom_from_pcie_prs_page_request(uint64 val);
extern atom_t pywrap_atom_from_pcie_prs_stop_marker(bool val);
extern atom_t pywrap_atom_from_pcie_requester_id(uint16 val);
extern atom_t pywrap_atom_from_pcie_requester_segment(uint8 val);
extern atom_t pywrap_atom_from_pcie_type(pcie_type_t val);
extern pcie_at_t pywrap_pcie_at_from_atom(atom_t *a);
extern uint8 pywrap_pcie_ats_invalidate_completion_count_from_atom(atom_t *a);
extern uint32 pywrap_pcie_ats_invalidate_completion_itag_vector_from_atom(atom_t *a);
extern uint8 pywrap_pcie_ats_invalidate_request_itag_from_atom(atom_t *a);
extern bool pywrap_pcie_ats_translation_request_cxl_src_from_atom(atom_t *a);
extern bool pywrap_pcie_ats_translation_request_no_write_from_atom(atom_t *a);
extern pcie_byte_count_ret_t *pywrap_pcie_byte_count_ret_from_atom(atom_t *a);
extern uint8 pywrap_pcie_destination_segment_from_atom(atom_t *a);
extern uint16 pywrap_pcie_device_id_from_atom(atom_t *a);
extern pcie_ecs_t pywrap_pcie_ecs_from_atom(atom_t *a);
extern pcie_error_ret_t *pywrap_pcie_error_ret_from_atom(atom_t *a);
extern pcie_ide_secured_t *pywrap_pcie_ide_secured_from_atom(atom_t *a);
extern pcie_link_negotiation_t *pywrap_pcie_link_negotiation_from_atom(atom_t *a);
extern pcie_msg_route_t pywrap_pcie_msg_route_from_atom(atom_t *a);
extern pcie_message_type_t pywrap_pcie_msg_type_from_atom(atom_t *a);
extern uint32 pywrap_pcie_pasid_from_atom(atom_t *a);
extern uint16 pywrap_pcie_prs_page_group_response_from_atom(atom_t *a);
extern uint64 pywrap_pcie_prs_page_request_from_atom(atom_t *a);
extern bool pywrap_pcie_prs_stop_marker_from_atom(atom_t *a);
extern uint16 pywrap_pcie_requester_id_from_atom(atom_t *a);
extern uint8 pywrap_pcie_requester_segment_from_atom(atom_t *a);
extern pcie_type_t pywrap_pcie_type_from_atom(atom_t *a);
extern typedef int pci_interrupt_pin_t;
constant PCI_INTERRUPT_INTA = 1;
constant PCI_INTERRUPT_INTB = 2;
constant PCI_INTERRUPT_INTC = 3;
constant PCI_INTERRUPT_INTD = 4;
extern typedef int pcie_message_type_t;
constant PCIE_ATS_Invalidate = 1;
constant PCIE_ATS_Invalidate_Completion = 2;
constant PCIE_PRS_Request = 4;
constant PCIE_PRS_Response = 5;
constant PCIE_Latency_Tolerance_Reporting = 16;
constant PCIE_Optimized_Buffer_Flush_Fill = 18;
constant PCIE_Msg_Assert_INTA = 32;
constant PCIE_Msg_Assert_INTB = 33;
constant PCIE_Msg_Assert_INTC = 34;
constant PCIE_Msg_Assert_INTD = 35;
constant PCIE_Msg_Deassert_INTA = 36;
constant PCIE_Msg_Deassert_INTB = 37;
constant PCIE_Msg_Deassert_INTC = 38;
constant PCIE_Msg_Deassert_INTD = 39;
constant PCIE_PM_Active_State_Nak = 20;
constant PCIE_PM_PME = 24;
constant PCIE_PM_Turn_Off = 25;
constant PCIE_PM_PME_TO_Ack = 27;
constant PCIE_ERR_COR = 48;
constant PCIE_ERR_NONFATAL = 49;
constant PCIE_ERR_FATAL = 51;
constant PCIE_Unlock = 0;
constant PCIE_Set_Slot_Power_Limit = 80;
constant PCIE_Precision_Time_Measurement = 82;
constant PCIE_HP_Power_Indicator_On = 69;
constant PCIE_HP_Power_Indicator_Blink = 71;
constant PCIE_HP_Power_Indicator_Off = 68;
constant PCIE_HP_Attention_Button_Pressed = 72;
constant PCIE_HP_Attention_Indicator_On = 65;
constant PCIE_HP_Attention_Indicator_Blink = 67;
constant PCIE_HP_Attention_Indicator_Off = 64;
constant PCIE_Vendor_Defined_Type_0 = 126;
constant PCIE_Vendor_Defined_Type_1 = 127;
constant PCIE_Locked_Transaction = 0;
extern pcie_message_type_t PCIE_DLL_Link_Down;
extern pcie_message_type_t PCIE_DLL_Link_Up;
extern typedef int pcie_ecs_t;
constant PCIE_ECS_Legacy = 0;
constant PCIE_ECS_SIG_SFW = 1;
constant PCIE_ECS_SIG_OS = 2;
constant PCIE_ECS_Extended = 3;
extern typedef int pcie_type_t;
constant PCIE_Type_Not_Set = 0;
constant PCIE_Type_Mem = 1;
constant PCIE_Type_IO = 2;
constant PCIE_Type_Cfg = 3;
constant PCIE_Type_Msg = 4;
constant PCIE_Type_Other = 5;
extern typedef int pcie_hotplug_pd_t;
constant PCIE_HP_PD_Adapter_Not_Present = 0;
constant PCIE_HP_PD_Adapter_Present = 1;
extern typedef int pcie_hotplug_mrl_t;
constant PCIE_HP_MRL_Closed = 0;
constant PCIE_HP_MRL_Open = 1;
extern typedef int pcie_msg_route_t;
constant PCIE_Msg_Route_Not_Set = 0;
constant PCIE_Msg_Route_Upstream = 1;
constant PCIE_Msg_Route_Address = 2;
constant PCIE_Msg_Route_ID = 3;
constant PCIE_Msg_Route_Broadcast = 4;
constant PCIE_Msg_Route_Terminate = 5;
constant PCIE_Msg_Route_Gather = 6;
extern typedef int pcie_at_t;
constant PCIE_AT_Not_Set = 0;
constant PCIE_AT_Untranslated = 1;
constant PCIE_AT_Translation_Request = 2;
constant PCIE_AT_Translated = 3;
extern typedef int pcie_error_t;
constant PCIE_Error_Not_Set = 0;
constant PCIE_Error_Unsupported_Request = 1;
constant PCIE_Error_Completer_Abort = 2;
constant PCIE_Error_Master_Abort = 3;
constant PCIE_Error_No_Error = 4;
constant PCIE_Error_Configuration_Request_Retry_Status = 5;
extern typedef int pcie_prs_response_code_t;
constant PCIE_PRS_Response_Success = 0;
constant PCIE_PRS_Response_Invalid_Request = 1;
constant PCIE_PRS_Response_Failure = 15;
extern typedef int pcie_link_speed_t;
constant PCIE_Link_Speed_Undefined = 0;
constant PCIE_Link_Speed_2_5 = 1;
constant PCIE_Link_Speed_5 = 2;
constant PCIE_Link_Speed_8 = 4;
constant PCIE_Link_Speed_16 = 8;
constant PCIE_Link_Speed_32 = 16;
constant PCIE_Link_Speed_64 = 32;
extern typedef int pcie_link_width_t;
constant PCIE_Link_Width_Undefined = 0;
constant PCIE_Link_Width_x1 = 1;
constant PCIE_Link_Width_x2 = 2;
constant PCIE_Link_Width_x4 = 4;
constant PCIE_Link_Width_x8 = 8;
constant PCIE_Link_Width_x16 = 16;
extern typedef struct { generic_transaction_t _internal_s; uint32 _internal_original_size; int _internal_bus_address; int _internal_bus_number; int _internal_device_number; int _internal_function_number; uint32 _internal_tlp_prefix; } pci_memory_transaction_t;
extern typedef struct { void (*bus_reset)(conf_object_t *obj); int (*_deprecated_interrupt_acknowledge)(conf_object_t *obj); void (*_deprecated_special_cycle)(conf_object_t *obj, uint32 value); void (*system_error)(conf_object_t *obj); void (*interrupt_raised)(conf_object_t *obj, int pin); void (*interrupt_lowered)(conf_object_t *obj, int pin); } pci_device_interface_t;
extern typedef struct { exception_type_t (*memory_access)(conf_object_t *obj, generic_transaction_t *mem_op); void (*raise_interrupt)(conf_object_t *obj, conf_object_t *dev, int pin); void (*lower_interrupt)(conf_object_t *obj, conf_object_t *dev, int pin); int (*interrupt_acknowledge)(conf_object_t *obj); int (*add_map)(conf_object_t *obj, conf_object_t *dev, addr_space_t space, conf_object_t *target, map_info_t info); int (*remove_map)(conf_object_t *obj, conf_object_t *dev, addr_space_t space, int function); void (*set_bus_number)(conf_object_t *obj, int bus_id); void (*set_sub_bus_number)(conf_object_t *obj, int bus_id); void (*add_default)(conf_object_t *obj, conf_object_t *dev, addr_space_t space, conf_object_t *target, map_info_t info); void (*remove_default)(conf_object_t *obj, addr_space_t space); void (*bus_reset)(conf_object_t *obj); void (*special_cycle)(conf_object_t *obj, uint32 value); void (*system_error)(conf_object_t *obj); int (*get_bus_address)(conf_object_t *obj, conf_object_t *dev); void (*set_device_status)(conf_object_t *obj, int device, int function, int enabled); conf_object_t *(*configuration_space)(conf_object_t *obj); conf_object_t *(*io_space)(conf_object_t *obj); conf_object_t *(*memory_space)(conf_object_t *obj); } pci_bus_interface_t;
extern typedef struct { exception_type_t (*operation)(conf_object_t *obj, generic_transaction_t *mem_op, addr_space_t space); } pci_upstream_interface_t;
extern typedef struct { exception_type_t (*read)(conf_object_t *obj, conf_object_t *initiator, uint16 rid, addr_space_t space, physical_address_t address, buffer_t buffer); exception_type_t (*write)(conf_object_t *obj, conf_object_t *initiator, uint16 rid, addr_space_t space, physical_address_t address, bytes_t buffer); } pci_upstream_operation_interface_t;
extern typedef struct { exception_type_t (*operation)(conf_object_t *obj, generic_transaction_t *mem_op, addr_space_t space); } pci_downstream_interface_t;
extern typedef struct { void (*system_error)(conf_object_t *obj); void (*raise_interrupt)(conf_object_t *obj, conf_object_t *pci_bus, int device, int pin); void (*lower_interrupt)(conf_object_t *obj, conf_object_t *pci_bus, int device, int pin); } pci_bridge_interface_t;
extern typedef struct { void (*raise_interrupt)(conf_object_t *obj, conf_object_t *pci_bus, int device, int pin); void (*lower_interrupt)(conf_object_t *obj, conf_object_t *pci_bus, int device, int pin); } pci_interrupt_interface_t;
extern typedef struct { attr_value_t (*supported_functions)(conf_object_t *obj); } pci_multi_function_device_interface_t;
extern typedef struct { void (*connected)(conf_object_t *obj, conf_object_t *port_obj, uint16 device_id); void (*disconnected)(conf_object_t *obj, conf_object_t *port_obj, uint16 device_id); void (*hot_reset)(conf_object_t *obj); } pcie_device_interface_t;
extern typedef struct { void (*add_map)(conf_object_t *obj, conf_object_t *map_obj, map_info_t info, pcie_type_t type); void (*del_map)(conf_object_t *obj, conf_object_t *map_obj, physical_address_t base, pcie_type_t type); void (*add_function)(conf_object_t *obj, conf_object_t *map_obj, uint16 device_and_function); void (*del_function)(conf_object_t *obj, conf_object_t *map_obj, uint16 device_and_function); void (*enable_function)(conf_object_t *obj, uint16 device_and_function); void (*disable_function)(conf_object_t *obj, uint16 device_and_function); uint16 (*get_device_id)(conf_object_t *obj, conf_object_t *dev_obj); } pcie_map_interface_t;
extern typedef struct { void (*set_secondary_bus_number)(conf_object_t *obj, uint64 value); void (*hot_reset)(conf_object_t *obj); } pcie_port_control_interface_t;
extern typedef struct { void (*presence_change)(conf_object_t *obj, pcie_hotplug_pd_t state); void (*power_fault)(conf_object_t *obj); void (*attention_button_pressed)(conf_object_t *obj); void (*mrl_sensor)(conf_object_t *obj, pcie_hotplug_mrl_t state); void (*data_link_layer)(conf_object_t *obj, bool is_active); } pcie_hotplug_events_interface_t;
extern typedef struct { bool (*trigger)(conf_object_t *obj, uint16 device_id); } pcie_link_training_interface_t;
extern typedef struct { pcie_error_t val; } pcie_error_ret_t;
extern typedef struct { uint64 val; } pcie_byte_count_ret_t;
extern typedef struct { pcie_link_speed_t maximum_link_speed; pcie_link_width_t maximum_link_width; pcie_link_speed_t negotiated_link_speed; pcie_link_width_t negotiated_link_width; } pcie_link_negotiation_t;
extern typedef struct { bool t; bool k; bool m; bool p; uint8 sub_stream; uint8 stream_id; uint8 pr_sent_counter; } pcie_ide_secured_t;
extern typedef struct { struct { uint20 pasid; uint1 exe; uint1 priv; } field; uint32 u32; } pcie_pasid_info_t;
extern typedef struct { struct { uint1 r; uint1 w; uint1 u; uint1 exe; uint1 priv; uint1 global; uint3 ama; uint1 cxl_io; uint1 n; uint1 s; uint52 translated_addr; } field; uint64 u64; } pcie_ats_translation_completion_entry_t;
extern typedef struct { struct { uint1 global; uint10 rsvd; uint1 s; uint52 untranslated_addr; } field; uint64 u64; } pcie_ats_invalidate_request_payload_t;
extern typedef struct { struct { uint1 r; uint1 w; uint1 l; uint9 prgi; uint52 page_addr; } field; uint64 u64; } pcie_prs_page_request_t;
extern typedef struct { struct { uint9 prgi; uint3 rsvd; uint4 response_code; } field; uint16 u16; } pcie_prs_page_group_response_t;
