/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\simulator\callbacks.h>
%}

import "simics/base/types.dml";
import "simics/base/event.dml";
import "simics/pywrap.dml";

extern int SIM_cancel_realtime_event(int64 id);
extern char const *SIM_get_global_message(lang_void *ref);
extern void SIM_notify_on_object(void *obj, int run_in_thread, void (*callback)(lang_void *data), lang_void *data);
extern void SIM_notify_on_socket(socket_t sock, notify_mode_t mode, int run_in_thread, void (*callback)(lang_void *data), lang_void *data);
extern int SIM_process_pending_work(void);
extern int SIM_process_work(int (*done)(lang_void *done_data), lang_void *done_data);
extern int64 SIM_realtime_event(uint32 delay_ms, void (*callback)(lang_void *data), lang_void *data, int run_in_thread, char const *desc);
extern void SIM_register_work(void (*f)(lang_void *data), lang_void *data);
extern void SIM_run_alone(void (*f)(lang_void *data), lang_void *data);
extern void SIM_run_async_work(lang_void *(*async_call)(lang_void *arg), void (*async_ready)(lang_void *async_ret, lang_void *arg), lang_void *arg);
extern void SIM_run_in_thread(void (*f)(lang_void *arg), lang_void *arg);
extern void SIM_thread_safe_callback(void (*f)(lang_void *data), lang_void *data);
extern void SIM_trigger_global_message(char const *msg, lang_void *ref);
extern void VT_add_telemetry_data(char const *group, char const *key, attr_value_t *value);
extern void VT_add_telemetry_data_bool(char const *group, char const *key, bool value);
extern void VT_add_telemetry_data_int(char const *group, char const *key, uint64 value);
extern void VT_add_telemetry_data_str(char const *group, char const *key, char const *value);
extern void VT_cross_cell_call(void (*f)(conf_object_t *obj, lang_void *arg), conf_object_t *obj, lang_void *arg);
extern void VT_dispatch_async_events(void);
extern void VT_domain_event_at(conf_object_t *domain, event_class_t *ec, conf_object_t *obj, conf_object_t *clock, double when, lang_void *param);
extern void VT_domain_event_soon(conf_object_t *domain, event_class_t *ec, conf_object_t *obj, lang_void *param);
extern void VT_post_local_work(conf_object_t *cell, void (*f)(lang_void *data), lang_void *data);
extern void VT_process_cross_cell_calls(void);
extern void VT_run_outside_cell(void (*f)(lang_void *arg), lang_void *arg);
extern typedef int notify_mode_t;
constant Sim_NM_Read = 0;
constant Sim_NM_Write = 1;
extern typedef struct { void (*add_data)(conf_object_t *obj, char const *group, char const *key, attr_value_t *value); } telemetry_manager_interface_t;
