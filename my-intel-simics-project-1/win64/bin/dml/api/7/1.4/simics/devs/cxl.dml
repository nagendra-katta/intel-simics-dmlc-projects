/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\devs\cxl.h>
%}

import "simics/base/types.dml";
import "simics/base/memory-transaction.dml";
import "simics/base/transaction.dml";
import "simics/pywrap.dml";

extern atom_t ATOM_cxl_type(cxl_type_t val);
extern cxl_type_t ATOM_get_transaction_cxl_type(transaction_t const *t);
extern cxl_type_t const *ATOM_transaction_cxl_type(transaction_t const *t);
extern atom_t pywrap_atom_from_cxl_type(cxl_type_t val);
extern cxl_type_t pywrap_cxl_type_from_atom(atom_t *a);
extern typedef int cxl_mbox_cmd_rc_t;
constant CXL_MBOX_CMD_RC_SUCCESS = 0;
constant CXL_MBOX_CMD_RC_BACKGROUND_COMMAND_STARTED = 1;
constant CXL_MBOX_CMD_RC_INVALID_INPUT = 2;
constant CXL_MBOX_CMD_RC_UNSUPPORTED = 3;
constant CXL_MBOX_CMD_RC_INTERNAL_ERROR = 4;
constant CXL_MBOX_CMD_RC_RETRY_REQUIRED = 5;
constant CXL_MBOX_CMD_RC_BUSY = 6;
constant CXL_MBOX_CMD_RC_MEDIA_DISABLED = 7;
constant CXL_MBOX_CMD_RC_FW_TRANSFER_IN_PROGRESS = 8;
constant CXL_MBOX_CMD_RC_FW_TRANSFER_OUT_OF_ORDER = 9;
constant CXL_MBOX_CMD_RC_FW_AUTHENTICATION_FAILED = 10;
constant CXL_MBOX_CMD_RC_INVALID_SLOT = 11;
constant CXL_MBOX_CMD_RC_ACTIVATION_FAILED_FW_ROLLED_BACK = 12;
constant CXL_MBOX_CMD_RC_ACTIVATION_FAILED_COLD_RESET_REQUIRED = 13;
constant CXL_MBOX_CMD_RC_INVALID_HANDLE = 14;
constant CXL_MBOX_CMD_RC_INVALID_PHYSICAL_ADDRESS = 15;
constant CXL_MBOX_CMD_RC_INJECT_POISON_LIMIT_REACHED = 16;
constant CXL_MBOX_CMD_RC_PERMANENT_MEDIA_FAILURE = 17;
constant CXL_MBOX_CMD_RC_ABORTED = 18;
constant CXL_MBOX_CMD_RC_INVALID_SECURITY_STATE = 19;
constant CXL_MBOX_CMD_RC_INCORRECT_PASSPHRASE = 20;
constant CXL_MBOX_CMD_RC_UNSUPPORTED_MAILBOX = 21;
constant CXL_MBOX_CMD_RC_INVALID_PAYLOAD_LENGTH = 22;
extern typedef int cxl_mbox_op_t;
constant CXL_MBOX_OP_INVALID = 0;
constant CXL_MBOX_OP_GET_EVENT_RECORD = 256;
constant CXL_MBOX_OP_CLEAR_EVENT_RECORD = 257;
constant CXL_MBOX_OP_GET_EVT_INT_POLICY = 258;
constant CXL_MBOX_OP_SET_EVT_INT_POLICY = 259;
constant CXL_MBOX_OP_GET_FW_INFO = 512;
constant CXL_MBOX_OP_TRANSFER_FW = 513;
constant CXL_MBOX_OP_ACTIVATE_FW = 514;
constant CXL_MBOX_OP_GET_TIMESTAMP = 768;
constant CXL_MBOX_OP_SET_TIMESTAMP = 769;
constant CXL_MBOX_OP_GET_SUPPORTED_LOGS = 1024;
constant CXL_MBOX_OP_GET_LOG = 1025;
constant CXL_MBOX_OP_IDENTIFY = 16384;
constant CXL_MBOX_OP_GET_PARTITION_INFO = 16640;
constant CXL_MBOX_OP_SET_PARTITION_INFO = 16641;
constant CXL_MBOX_OP_GET_LSA = 16642;
constant CXL_MBOX_OP_SET_LSA = 16643;
constant CXL_MBOX_OP_GET_HEALTH_INFO = 16896;
constant CXL_MBOX_OP_GET_ALERT_CONFIG = 16897;
constant CXL_MBOX_OP_SET_ALERT_CONFIG = 16898;
constant CXL_MBOX_OP_GET_SHUTDOWN_STATE = 16899;
constant CXL_MBOX_OP_SET_SHUTDOWN_STATE = 16900;
constant CXL_MBOX_OP_GET_POISON = 17152;
constant CXL_MBOX_OP_INJECT_POISON = 17153;
constant CXL_MBOX_OP_CLEAR_POISON = 17154;
constant CXL_MBOX_OP_GET_SCAN_MEDIA_CAPS = 17155;
constant CXL_MBOX_OP_SCAN_MEDIA = 17156;
constant CXL_MBOX_OP_GET_SCAN_MEDIA = 17157;
constant CXL_MBOX_OP_SANITIZE = 17408;
constant CXL_MBOX_OP_SECURE_ERASE = 17409;
constant CXL_MBOX_OP_GET_SECURITY_STATE = 17664;
constant CXL_MBOX_OP_SET_PASSPHRASE = 17665;
constant CXL_MBOX_OP_DISABLE_PASSPHRASE = 17666;
constant CXL_MBOX_OP_UNLOCK = 17667;
constant CXL_MBOX_OP_FREEZE_SECURITY = 17668;
constant CXL_MBOX_OP_PASSPHRASE_SECURE_ERASE = 17669;
constant CXL_MBOX_OP_SECURITY_SEND = 17920;
constant CXL_MBOX_OP_SECURITY_RECEIVE = 17921;
constant CXL_MBOX_OP_GET_SLD_QOS_CONTROL = 18176;
constant CXL_MBOX_OP_SET_SLD_QOS_CONTROL = 18177;
constant CXL_MBOX_OP_GET_SLD_QOS_STATUS = 18178;
constant CXL_MBOX_OP_EVENT_NOTIFICATION = 20480;
constant CXL_MBOX_OP_IDENTIFY_SWITCH_DEVICE = 20736;
constant CXL_MBOX_OP_GET_PHYSICAL_PORT_STATE = 20737;
constant CXL_MBOX_OP_PHYSICAL_PORT_CONTROL = 20738;
constant CXL_MBOX_OP_SEND_PPB_CXL_IO_CONFIGURATION_REQUEST_PHYSICAL = 20739;
constant CXL_MBOX_OP_GET_VIRTUAL_CXL_SWITCH_INFO = 20992;
constant CXL_MBOX_OP_BIND_VPPB = 20993;
constant CXL_MBOX_OP_UNBIND_VPPB = 20994;
constant CXL_MBOX_OP_GENERATE_AER_EVENT = 20995;
constant CXL_MBOX_OP_TUNNEL_MANAGEMENT_COMMAND = 21248;
constant CXL_MBOX_OP_SEND_PPB_CXL_IO_CONFIGURATION_REQUEST_MLD = 21249;
constant CXL_MBOX_OP_SEND_PPB_CXL_IO_MEMORY_REQUEST = 21250;
constant CXL_MBOX_OP_GET_LD_INFO = 21504;
constant CXL_MBOX_OP_GET_LD_ALLOCATIONS = 21505;
constant CXL_MBOX_OP_SET_LD_ALLOCATIONS = 21506;
constant CXL_MBOX_OP_GET_QOS_CONTROL = 21507;
constant CXL_MBOX_OP_SET_QOS_CONTROL = 21508;
constant CXL_MBOX_OP_GET_QOS_STATUS = 21509;
constant CXL_MBOX_OP_GET_QOS_ALLOCATED_BW = 21510;
constant CXL_MBOX_OP_SET_QOS_ALLOCATED_BW = 21511;
constant CXL_MBOX_OP_GET_QOS_BW_LIMIT = 21512;
constant CXL_MBOX_OP_SET_QOS_BW_LIMIT = 21513;
extern typedef int cxl_type_t;
constant CXL_Type_Not_Set = 0;
constant CXL_Type_Io = 1;
constant CXL_Type_Mem = 2;
constant CXL_Type_Cache = 3;
constant CXL_Type_Other = 4;
extern typedef struct { void (*add_map)(conf_object_t *obj, conf_object_t *map_obj, map_info_t info, cxl_type_t type); void (*del_map)(conf_object_t *obj, conf_object_t *map_obj, physical_address_t base, cxl_type_t type); } cxl_map_interface_t;
extern typedef struct { int (*enable_decoder)(conf_object_t *obj, uint8 index, uint8 ig, uint8 iw, uint64 base, uint64 size, uint64 target_list); int (*disable_decoder)(conf_object_t *obj, uint8 decoder_index); } cxl_non_device_decoder_handling_interface_t;
extern typedef struct { bool (*register_port_mem_obj)(conf_object_t *obj, uint8 port_number, conf_object_t *port_mem_obj); void (*unregister_port_mem_obj)(conf_object_t *obj, uint8 port_number); } cxl_mem_downstream_port_managing_interface_t;
