/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\devs\liblink.h>
%}

import "simics/base/types.dml";
import "simics/base/attr-value.dml";
import "simics/base/log.dml";
import "simics/util/frags.dml";

extern void SIMLINK_config_remove_value(conf_object_t *link, char const *key);
extern void SIMLINK_config_update_value(conf_object_t *link, char const *key, frags_t const *value);
extern conf_object_t *SIMLINK_endpoint_clock(conf_object_t const *ep);
extern char const *SIMLINK_endpoint_dev_name(conf_object_t const *ep, buffer_t scratch);
extern conf_object_t *SIMLINK_endpoint_device(conf_object_t const *ep);
extern void SIMLINK_endpoint_disconnect(conf_object_t *ep);
extern void SIMLINK_endpoint_finalize(conf_object_t *ep);
extern uint64 SIMLINK_endpoint_id(conf_object_t const *ep);
extern void SIMLINK_endpoint_init(conf_object_t *ep_obj, bool snoop);
extern bool SIMLINK_endpoint_is_device(conf_object_t const *ep);
extern conf_object_t *SIMLINK_endpoint_link(conf_object_t const *ep);
extern char const *SIMLINK_endpoint_port(conf_object_t const *ep);
extern void SIMLINK_finalize(conf_object_t *link);
extern conf_object_t *SIMLINK_find_endpoint_by_id(conf_object_t *link, uint64 id);
extern void SIMLINK_init(conf_object_t *obj, link_type_t const *type);
extern void SIMLINK_init_library(void);
extern void SIMLINK_init_message(link_message_t *msg);
extern void SIMLINK_pre_delete(conf_object_t *obj);
extern void SIMLINK_register_class(conf_class_t *cls);
extern void SIMLINK_register_endpoint_class(conf_class_t *cls, char const *msg_type);
extern void SIMLINK_register_snoop_endpoint_class(conf_class_t *cls);
extern void SIMLINK_send_message(conf_object_t *src_ep, uint64 dst_id, link_message_t *msg);
extern void SIMLINK_send_message_multi(conf_object_t *src_ep, uint32 num_dsts, uint64 const *dst_ids, link_message_t *msg);
extern conf_object_t *SIMLINK_snoop_endpoint_create(conf_class_t *cls, conf_object_t *link, conf_object_t *clock, attr_value_t attrs);
extern typedef struct { atomic_counter_t refcount; } link_message_t;
extern typedef struct { attr_value_t (*msg_to_attr)(conf_object_t *link, link_message_t const *msg); link_message_t *(*msg_from_attr)(conf_object_t *link, attr_value_t attr); void (*free_msg)(conf_object_t *link, link_message_t *msg); void (*marshal)(conf_object_t *link, link_message_t const *msg, void (*finish)(void *data, frags_t const *msg), void *finish_data); link_message_t *(*unmarshal)(conf_object_t *link, frags_t const *msg); void (*deliver)(conf_object_t *ep, link_message_t const *msg); void (*update_config_value)(conf_object_t *link, char const *key, frags_t const *value); void (*remove_config_value)(conf_object_t *link, char const *key); void (*device_changed)(conf_object_t *ep, conf_object_t *old_dev); } link_type_t;
