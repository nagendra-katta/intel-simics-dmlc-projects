/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\arch\x86-instrumentation.h>
%}

import "simics/arch/x86.dml";
import "simics/model-iface/cpu-instrumentation.dml";

extern typedef int vmx_mode_t;
constant Vmx_Off = 0;
constant Vmx_Root = 1;
constant Vmx_Non_Root = 2;
extern typedef int x86_stream_enum_t;
extern x86_stream_enum_t X86_Stream_Instruction_LA;
extern x86_stream_enum_t X86_Stream_Instruction_LA_After;
extern x86_stream_enum_t X86_Stream_Read_Memory;
extern x86_stream_enum_t X86_Stream_Write_Memory;
extern x86_stream_enum_t X86_Stream_Last;
extern typedef struct { linear_address_t (*linear_address)(conf_object_t *cpu, instruction_handle_t *handle); } x86_instruction_query_interface_t;
extern typedef struct { linear_address_t (*linear_address)(conf_object_t *cpu, memory_handle_t *handle); x86_seg_t (*segment)(conf_object_t *cpu, memory_handle_t *handle); x86_access_type_t (*access_type)(conf_object_t *obj, memory_handle_t *handle); x86_memory_type_t (*memory_type)(conf_object_t *obj, memory_handle_t *handle); } x86_memory_query_interface_t;
extern typedef struct { uint8 (*vector)(conf_object_t *cpu, exception_handle_t *handle); x86_exception_source_t (*source)(conf_object_t *cpu, exception_handle_t *handle); uint32 (*error_code)(conf_object_t *cpu, exception_handle_t *handle); } x86_exception_query_interface_t;
extern typedef struct { x86_seg_t (*segment)(conf_object_t *cpu, address_handle_t *handle); page_crossing_info_t (*get_page_crossing_info)(conf_object_t *cpu, address_handle_t *handle); } x86_address_query_interface_t;
extern typedef struct { cpu_cb_handle_t *(*register_mode_switch_cb)(conf_object_t *cpu, conf_object_t *connection, x86_mode_switch_cb_t cb, lang_void *user_data); cpu_cb_handle_t *(*register_illegal_instruction_cb)(conf_object_t *cpu, conf_object_t *connection, cpu_instruction_decoder_cb_t cb, cpu_instruction_disassemble_cb_t disass_cb, lang_void *data); } x86_instrumentation_subscribe_interface_t;
extern typedef struct { cpu_cb_handle_t *(*register_mode_enter_cb)(conf_object_t *cpu, conf_object_t *connection, x86_mode_switch_cb_t cb, lang_void *user_data); cpu_cb_handle_t *(*register_mode_leave_cb)(conf_object_t *cpu, conf_object_t *connection, x86_mode_switch_cb_t cb, lang_void *user_data); cpu_cb_handle_t *(*register_illegal_instruction_cb)(conf_object_t *cpu, conf_object_t *connection, cpu_instruction_decoder_cb_t cb, cpu_instruction_disassemble_cb_t disass_cb, lang_void *data); } x86_instrumentation_subscribe_v2_interface_t;
extern typedef struct { cpu_cb_handle_t *(*register_vmx_mode_leave_cb)(conf_object_t *cpu, conf_object_t *connection, vmx_mode_switch_cb_t cb, lang_void *user_data); cpu_cb_handle_t *(*register_vmx_mode_enter_cb)(conf_object_t *cpu, conf_object_t *connection, vmx_mode_switch_cb_t cb, lang_void *user_data); } vmx_instrumentation_subscribe_interface_t;
extern typedef struct { cpu_cb_handle_t *(*register_smm_enter_before_cb)(conf_object_t *cpu, conf_object_t *connection, smm_switch_cb_t cb, lang_void *user_data); cpu_cb_handle_t *(*register_smm_enter_after_cb)(conf_object_t *cpu, conf_object_t *connection, smm_switch_cb_t cb, lang_void *user_data); cpu_cb_handle_t *(*register_smm_leave_before_cb)(conf_object_t *cpu, conf_object_t *connection, smm_switch_cb_t cb, lang_void *user_data); cpu_cb_handle_t *(*register_smm_leave_after_cb)(conf_object_t *cpu, conf_object_t *connection, smm_switch_cb_t cb, lang_void *user_data); } smm_instrumentation_subscribe_interface_t;
extern typedef void (*smm_switch_cb_t)(conf_object_t *obj, conf_object_t *cpu, lang_void *user_data);
extern typedef void (*vmx_mode_switch_cb_t)(conf_object_t *obj, conf_object_t *cpu, vmx_mode_t mode, physical_address_t vmcs_address, lang_void *user_data);
extern typedef void (*x86_mode_switch_cb_t)(conf_object_t *obj, conf_object_t *cpu, x86_detailed_exec_mode_t mode, lang_void *user_data);
