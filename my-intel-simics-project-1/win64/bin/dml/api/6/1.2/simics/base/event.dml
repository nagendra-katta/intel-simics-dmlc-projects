/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\base\event.h>
%}

import "simics/base/types.dml";
import "simics/base/attr-value.dml";
import "simics/base/time.dml";

extern void SIM_event_cancel_step(conf_object_t *clock, event_class_t *evclass, conf_object_t *obj, int (*pred)(lang_void *data, lang_void *match_data), lang_void *match_data);
extern void SIM_event_cancel_time(conf_object_t *clock, event_class_t *evclass, conf_object_t *obj, int (*pred)(lang_void *data, lang_void *match_data), lang_void *match_data);
extern event_class_flag_t SIM_event_class_flags(event_class_t *ec);
extern cycles_t SIM_event_find_next_cycle(conf_object_t *clock, event_class_t *evclass, conf_object_t *obj, int (*pred)(lang_void *data, lang_void *match_data), lang_void *match_data);
extern pc_step_t SIM_event_find_next_step(conf_object_t *clock, event_class_t *evclass, conf_object_t *obj, int (*pred)(lang_void *data, lang_void *match_data), lang_void *match_data);
extern double SIM_event_find_next_time(conf_object_t *clock, event_class_t *evclass, conf_object_t *obj, int (*pred)(lang_void *data, lang_void *match_data), lang_void *match_data);
extern void SIM_event_post_cycle(conf_object_t *clock, event_class_t *evclass, conf_object_t *obj, cycles_t cycles, lang_void *user_data);
extern void SIM_event_post_step(conf_object_t *clock, event_class_t *evclass, conf_object_t *obj, pc_step_t steps, lang_void *user_data);
extern void SIM_event_post_time(conf_object_t *clock, event_class_t *evclass, conf_object_t *obj, double seconds, lang_void *user_data);
extern event_class_t *SIM_get_event_class(conf_class_t *cl, char const *name);
extern event_class_t *SIM_register_event(char const *name, conf_class_t *cl, event_class_flag_t flags, void (*callback)(conf_object_t *obj, lang_void *data), void (*destroy)(conf_object_t *obj, lang_void *data), attr_value_t (*get_value)(conf_object_t *obj, lang_void *data), lang_void *(*set_value)(conf_object_t *obj, attr_value_t value), char *(*describe)(conf_object_t *obj, lang_void *data));
extern pc_step_t SIM_step_count(conf_object_t *obj);
extern event_class_t *VT_get_event_class(conf_class_t *cl, char const *name);
extern void VT_stacked_post(conf_object_t *obj, void (*func)(conf_object_t *obj, lang_void *param), lang_void *user_data);
extern typedef int event_class_flag_t;
constant Sim_EC_No_Flags = 0;
constant Sim_EC_Notsaved = 1;
constant Sim_EC_Slot_Early = 2;
constant Sim_EC_Slot_Late = 4;
constant Sim_EC_Machine_Sync = 8;
constant Sim_EC_No_Serialize = 16;
extern typedef struct { char const *name; conf_class_t *conf_class; event_class_flag_t flags; void (*callback)(conf_object_t *obj, lang_void *data); void (*destroy)(conf_object_t *obj, lang_void *data); attr_value_t (*get_value)(conf_object_t *obj, lang_void *data); lang_void *(*set_value)(conf_object_t *obj, attr_value_t value); char *(*describe)(conf_object_t *obj, lang_void *data); uint32 slot; } event_class_t;
extern typedef simtime_t pc_step_t;
extern typedef int64 pico_secs_t;
