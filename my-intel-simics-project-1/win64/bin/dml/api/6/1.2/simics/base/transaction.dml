/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\base\transaction.h>
%}

import "simics/base/breakpoints.dml";
import "simics/base/types.dml";
import "simics/base/map-target.dml";
import "simics/base/memory-transaction.dml";
import "simics/pywrap.dml";

extern atom_t ATOM_bytemap(transaction_bytemap_t *val);
extern atom_t ATOM_completion(transaction_completion_t val);
extern atom_t ATOM_data(uint8 *val);
extern atom_t ATOM_fill_value(uint8 val);
extern atom_t ATOM_flags(transaction_flags_t val);
extern generic_transaction_t *ATOM_get_transaction_memop(transaction_t const *t);
extern transaction_target_type_ret_t *ATOM_get_transaction_target_type(transaction_t const *t);
extern atom_t ATOM_initiator(conf_object_t *val);
extern atom_t ATOM_list_end(int val);
extern atom_t ATOM_memop(generic_transaction_t *val);
extern atom_t ATOM_owner(conf_object_t *val);
extern atom_t ATOM_size(uint32 val);
extern atom_t ATOM_target_type(transaction_target_type_ret_t *val);
extern atom_t ATOM_trace_atom_access(transaction_trace_atom_access_t *val);
extern generic_transaction_t const **ATOM_transaction_memop(transaction_t const *t);
extern transaction_target_type_ret_t const **ATOM_transaction_target_type(transaction_t const *t);
extern atom_t ATOM_user_data(lang_void *val);
extern void SIM_complete_transaction(transaction_t *t, exception_type_t ex);
extern transaction_t *SIM_defer_owned_transaction(transaction_t *t);
extern transaction_t *SIM_defer_transaction(conf_object_t *obj, transaction_t *t);
extern void SIM_get_transaction_bytes(transaction_t const *t, buffer_t buf);
extern void SIM_get_transaction_bytes_offs(transaction_t const *t, uint32 offs, buffer_t buf, bool zerofill_holes);
extern int64 SIM_get_transaction_id(transaction_t *t);
extern uint64 SIM_get_transaction_value_be(transaction_t const *t);
extern uint64 SIM_get_transaction_value_le(transaction_t const *t);
extern bool SIM_inspect_address_routing(map_target_t const *mt, transaction_t *t, uint64 addr, bool (*callback)(map_target_t const *mt, transaction_t const *t, uint64 addr, uint64 base, uint64 start, uint64 size, access_t access, translation_flags_t flags, lang_void *data), lang_void *data);
extern bool SIM_inspect_breakpoints(map_target_t const *mt, transaction_t *t, uint64 start, uint64 end, bool (*callback)(conf_object_t *trigger_object, breakpoint_set_t bp_set, transaction_t const *t, uint64 addr, uint64 size, lang_void *data), lang_void *data);
extern exception_type_t SIM_issue_read_transaction(map_target_t *mt, uint64 addr, buffer_t buf, bool inquiry, conf_object_t *initiator);
extern exception_type_t SIM_issue_transaction(map_target_t const *mt, transaction_t *t, uint64 addr);
extern exception_type_t SIM_issue_write_transaction(map_target_t *mt, uint64 addr, bytes_t bytes, bool inquiry, conf_object_t *initiator);
extern exception_type_t SIM_monitor_chained_transaction(transaction_t *t, exception_type_t ex);
extern exception_type_t SIM_monitor_transaction(transaction_t *t, exception_type_t ex);
extern exception_type_t SIM_poll_transaction(transaction_t *t);
extern void SIM_reconnect_transaction(transaction_t *t, int64 id);
extern void SIM_register_python_atom_type(char const *name);
extern void SIM_replace_transaction(transaction_t *t_old, transaction_t *t_new);
extern void SIM_set_transaction_bytes(transaction_t const *t, bytes_t bytes);
extern void SIM_set_transaction_bytes_constant(transaction_t const *t, uint8 value);
extern void SIM_set_transaction_bytes_offs(transaction_t const *t, uint32 offs, bytes_t bytes);
extern void SIM_set_transaction_value_be(transaction_t const *t, uint64 val);
extern void SIM_set_transaction_value_le(transaction_t const *t, uint64 val);
extern transaction_flags_t SIM_transaction_flags(transaction_t const *t);
extern conf_object_t *SIM_transaction_initiator(transaction_t const *t);
extern bool SIM_transaction_is_deferrable(transaction_t const *t);
extern bool SIM_transaction_is_fetch(transaction_t const *t);
extern bool SIM_transaction_is_inquiry(transaction_t const *t);
extern bool SIM_transaction_is_read(transaction_t const *t);
extern bool SIM_transaction_is_write(transaction_t const *t);
extern uint32 SIM_transaction_size(transaction_t const *t);
extern exception_type_t SIM_transaction_wait(transaction_t *t, exception_type_t ex);
extern atom_id_t VT_get_atom_class_id(char const *name);
extern transaction_t *VT_get_transaction(int64 id);
extern attr_value_t VT_list_registered_atoms(void);
extern atom_id_t VT_lookup_atom_class_id(char const *name);
extern atom_t const *VT_lookup_transaction_atom(transaction_t const *t, atom_id_t id);
extern void VT_register_atom_class(char const *name, char const *pywrap_atom_from_type, char const *pywrap_type_from_atom);
extern void *VT_transaction_atom(transaction_t const *t, atom_id_t id);
extern atom_t pywrap_atom_from_bytemap(transaction_bytemap_t *val);
extern atom_t pywrap_atom_from_completion(transaction_completion_t val);
extern atom_t pywrap_atom_from_data(uint8 *val);
extern atom_t pywrap_atom_from_fill_value(uint8 val);
extern atom_t pywrap_atom_from_flags(transaction_flags_t val);
extern atom_t pywrap_atom_from_initiator(conf_object_t *val);
extern atom_t pywrap_atom_from_list_end(int val);
extern atom_t pywrap_atom_from_memop(generic_transaction_t *val);
extern atom_t pywrap_atom_from_owner(conf_object_t *val);
extern atom_t pywrap_atom_from_size(uint32 val);
extern atom_t pywrap_atom_from_target_type(transaction_target_type_ret_t *val);
extern atom_t pywrap_atom_from_trace_atom_access(transaction_trace_atom_access_t *val);
extern atom_t pywrap_atom_from_user_data(lang_void *val);
extern transaction_bytemap_t *pywrap_bytemap_from_atom(atom_t *a);
extern transaction_completion_t pywrap_completion_from_atom(atom_t *a);
extern uint8 *pywrap_data_from_atom(atom_t *a);
extern uint8 pywrap_fill_value_from_atom(atom_t *a);
extern transaction_flags_t pywrap_flags_from_atom(atom_t *a);
extern conf_object_t *pywrap_initiator_from_atom(atom_t *a);
extern int pywrap_list_end_from_atom(atom_t *a);
extern generic_transaction_t *pywrap_memop_from_atom(atom_t *a);
extern conf_object_t *pywrap_owner_from_atom(atom_t *a);
extern uint32 pywrap_size_from_atom(atom_t *a);
extern transaction_target_type_ret_t *pywrap_target_type_from_atom(atom_t *a);
extern transaction_trace_atom_access_t *pywrap_trace_atom_access_from_atom(atom_t *a);
extern lang_void *pywrap_user_data_from_atom(atom_t *a);
extern typedef int translation_flags_t;
constant Sim_Translation_Dynamic = 1;
constant Sim_Translation_Ambiguous = 2;
extern typedef int transaction_target_type_t;
constant Sim_Transaction_Target_Unset = 0;
extern transaction_target_type_t Sim_Transaction_Target_Ram;
extern transaction_target_type_t Sim_Transaction_Target_Device;
extern transaction_target_type_t Sim_Transaction_Target_Uncacheable;
extern transaction_target_type_t Sim_Transaction_Target_Cacheable_Ram;
extern transaction_target_type_t Sim_Transaction_Target_Cacheable_Device;
extern transaction_target_type_t Sim_Transaction_Target_Uncacheable_Ram;
extern transaction_target_type_t Sim_Transaction_Target_Uncacheable_Device;
extern typedef int atom_id_t;
constant Sim_Atom_Id_illegal = 0;
constant Sim_Atom_Id_list_end = 1;
constant Sim_Atom_Id_flags = 2;
constant Sim_Atom_Id_data = 3;
constant Sim_Atom_Id_size = 4;
constant Sim_Atom_Id_fill_value = 5;
constant Sim_Atom_Id_initiator = 6;
constant Sim_Atom_Id_user_data = 7;
constant Sim_Atom_Id_completion = 8;
constant Sim_Atom_Id_owner = 9;
constant Sim_Atom_Id_memop = 10;
constant Sim_Atom_Id_bytemap = 11;
constant Sim_Atom_Id_trace_atom_access = 12;
constant Sim_Atom_Id_target_type = 13;
constant Sim_Atom_Id_pcie_type = 256;
constant Sim_Atom_Id_pcie_requester_id = 257;
constant Sim_Atom_Id_pcie_msg_type = 258;
constant Sim_Atom_Id_pcie_ecs = 259;
constant Sim_Atom_Id_pcie_msg_route = 260;
constant Sim_Atom_Id_pcie_pasid = 261;
constant Sim_Atom_Id_pcie_at = 262;
constant Sim_Atom_Id_pcie_error_ret = 263;
constant Sim_Atom_Id_pcie_byte_count_ret = 264;
constant Sim_Atom_Id_pcie_device_id = 265;
constant Sim_Atom_Id_pcie_destination_segment = 266;
constant Sim_Atom_Id_pcie_link_negotiation = 267;
constant Sim_Atom_Id_pcie_ats_translation_request_cxl_src = 268;
constant Sim_Atom_Id_pcie_ats_translation_request_no_write = 269;
constant Sim_Atom_Id_pcie_ats_invalidate_request_itag = 270;
constant Sim_Atom_Id_pcie_ats_invalidate_completion_itag_vector = 271;
constant Sim_Atom_Id_pcie_ats_invalidate_completion_count = 272;
constant Sim_Atom_Id_pcie_prs_page_request = 273;
constant Sim_Atom_Id_pcie_prs_page_group_response = 274;
constant Sim_Atom_Id_pcie_prs_stop_marker = 275;
constant Sim_Atom_Id_pcie_requester_segment = 276;
constant Sim_Atom_Id_pcie_ide_secured = 277;
constant Sim_Atom_Id_arm_privileged = 512;
constant Sim_Atom_Id_arm_nonsecure = 513;
constant Sim_Atom_Id_arm_memory_attributes = 514;
constant Sim_Atom_Id_arm_smmu_attributes = 515;
constant Sim_Atom_Id_arm_nsaid = 516;
constant Sim_Atom_Id_arm_device_id = 517;
constant Sim_Atom_Id_riscv_wg_wid = 768;
constant Sim_Atom_Id_riscv_device_id = 769;
constant Sim_Atom_Id_riscv_process_id = 770;
constant Sim_Atom_Id_riscv_io_error_ret = 771;
constant Sim_Atom_Id_cxl_type = 1024;
extern typedef int transaction_flags_t;
extern transaction_flags_t Sim_Transaction_Fetch;
extern transaction_flags_t Sim_Transaction_Write;
extern transaction_flags_t Sim_Transaction_Control;
extern transaction_flags_t Sim_Transaction_Inquiry;
extern transaction_flags_t Sim_Transaction_Incoherent;
extern transaction_flags_t Sim_Transaction_Atomic;
extern typedef struct { map_target_t const *target; physical_address_t base; physical_address_t start; physical_address_t size; translation_flags_t flags; } translation_t;
extern typedef struct { transaction_target_type_t val; } transaction_target_type_ret_t;
extern typedef struct { atom_id_t id; void *ptr; } atom_t;
extern typedef struct { atom_t *atoms; transaction_t *prev; struct { } *_cache; uint64 _status; } transaction_t;
extern typedef struct { } transaction_bytemap_t;
extern typedef struct { void (*callback)(transaction_t const *t, atom_id_t atom_id, lang_void *data); lang_void *cb_data; uint64 _internal; } transaction_trace_atom_access_t;
extern typedef exception_type_t (*transaction_completion_t)(conf_object_t *obj, transaction_t *t, exception_type_t ex);
