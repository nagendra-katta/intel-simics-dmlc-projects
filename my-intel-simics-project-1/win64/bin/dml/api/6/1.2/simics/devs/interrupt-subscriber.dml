/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\devs\interrupt-subscriber.h>
%}

import "simics/base/conf-object.dml";
import "simics/devs/apic.dml";
import "simics/pywrap.dml";

extern typedef int interrupt_source_t;
constant Interrupt_Source_Icr_Ipr = 0;
constant Interrupt_Source_Msi = 1;
constant Interrupt_Source_Virtual_Wire = 2;
constant Interrupt_Source_Nmi_Pin = 3;
constant Interrupt_Source_Lvt = 4;
constant Interrupt_Source_Iommu = 5;
constant Interrupt_Source_Int2 = 6;
constant Interrupt_Source_Vmcs_Injection = 7;
constant Interrupt_Source_Legacy_Apic_Vector = 8;
constant Interrupt_Source_Self_Ipi = 9;
constant Interrupt_Source_Unknown = 10;
extern typedef struct { void (*notify)(conf_object_t *obj, apic_delivery_mode_t delivery_mode, bool level_assert, apic_trigger_mode_t trigger_mode, uint8 vector, interrupt_source_t source); void (*reset)(conf_object_t *obj); } interrupt_subscriber_interface_t;
