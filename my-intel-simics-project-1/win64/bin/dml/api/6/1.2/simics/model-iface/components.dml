/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include <simics\model-iface\components.h>
%}

import "simics/base/types.dml";
import "simics/base/attr-value.dml";
import "simics/pywrap.dml";

extern typedef int connector_direction_t;
constant Sim_Connector_Direction_Up = 0;
constant Sim_Connector_Direction_Down = 1;
constant Sim_Connector_Direction_Any = 2;
extern typedef struct { bool (*pre_instantiate)(conf_object_t *obj); void (*post_instantiate)(conf_object_t *obj); bool (*create_cell)(conf_object_t *obj); attr_value_t (*get_slots)(conf_object_t *obj); attr_value_t (*get_slot_objects)(conf_object_t *obj); attr_value_t (*get_slot_value)(conf_object_t *obj, char const *slot); void (*set_slot_value)(conf_object_t *obj, char const *slot, attr_value_t value); bool (*has_slot)(conf_object_t *obj, char const *slot); bool (*add_slot)(conf_object_t *obj, char const *slot); bool (*del_slot)(conf_object_t *obj, char const *slot); } component_interface_t;
extern typedef struct { char *(*type)(conf_object_t *obj); bool (*hotpluggable)(conf_object_t *obj); bool (*required)(conf_object_t *obj); bool (*multi)(conf_object_t *obj); connector_direction_t (*direction)(conf_object_t *obj); bool (*add_destination)(conf_object_t *obj, conf_object_t *connector); bool (*remove_destination)(conf_object_t *obj, conf_object_t *connector); attr_value_t (*destination)(conf_object_t *obj); void (*update)(conf_object_t *obj); bool (*check)(conf_object_t *obj, attr_value_t attr); void (*connect)(conf_object_t *obj, attr_value_t attr); void (*disconnect)(conf_object_t *obj); bool (*deletion_requested)(conf_object_t *obj); } connector_interface_t;
extern typedef struct { attr_value_t (*get_check_data)(conf_object_t *obj, conf_object_t *connector); attr_value_t (*get_connect_data)(conf_object_t *obj, conf_object_t *connector); bool (*check)(conf_object_t *obj, conf_object_t *connector, attr_value_t attr); void (*connect)(conf_object_t *obj, conf_object_t *connector, attr_value_t attr); void (*disconnect)(conf_object_t *obj, conf_object_t *connector); } component_connector_interface_t;
extern typedef struct { uint64 (*size)(conf_object_t *obj); } disk_component_interface_t;
