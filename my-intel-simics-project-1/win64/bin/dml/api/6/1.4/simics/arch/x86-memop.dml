/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\arch\x86-memop.h>
%}

import "simics/base/memory-transaction.dml";
import "simics/processor/types.dml";
import "simics/processor/generic-spr.dml";
import "simics/pywrap.dml";

extern typedef int x86_access_type_t;
constant X86_Other = 0;
constant X86_Vanilla = 1;
constant X86_Instruction = 2;
constant X86_Clflush = 3;
constant X86_Fpu_Env = 4;
constant X86_Fpu_State = 5;
constant X86_Idt = 6;
constant X86_Gdt = 7;
constant X86_Ldt = 8;
constant X86_Task_Segment = 9;
constant X86_Task_Switch = 10;
constant X86_Far_Call_Parameter = 11;
constant X86_Stack = 12;
constant X86_Pml4 = 13;
constant X86_Pdp = 14;
constant X86_Pd = 15;
constant X86_Pt = 16;
constant X86_Sse = 17;
constant X86_Fpu = 18;
constant X86_Access_Simple = 19;
constant X86_Microcode_Update = 20;
constant X86_Non_Temporal = 21;
constant X86_Prefetch_3DNow = 22;
constant X86_Prefetchw_3DNow = 23;
constant X86_Prefetch_T0 = 24;
constant X86_Prefetch_T1 = 25;
constant X86_Prefetch_T2 = 26;
constant X86_Prefetch_NTA = 27;
constant X86_Loadall = 28;
constant X86_Atomic_Info = 29;
constant X86_Cmpxchg16b = 30;
constant X86_Smm_State = 31;
constant X86_Vmcs = 32;
constant X86_Vmx_IO_Bitmap = 33;
constant X86_Vmx_Vapic = 34;
constant X86_Vmx_Msr = 35;
constant X86_Vmx_Msr_Bitmaps = 36;
constant X86_Pml4e = 37;
constant X86_Pdpte = 38;
constant X86_Pde = 39;
constant X86_Pte = 40;
constant X86_Invept_Descriptor = 41;
constant X86_Shadow_Stack = 42;
constant X86_Invvpid_Descriptor = 43;
constant X86_Processor_Trace = 44;
constant X86_Pml5 = 45;
constant X86_Pml5e = 46;
constant X86_Pdp_Pae = 47;
constant X86_Vmx_EPTP_List = 48;
constant X86_Vmx_VE_Info = 49;
constant X86_Sppt = 50;
constant X86_Pml_Log = 51;
constant X86_Pebs = 52;
constant X86_Vmx_Pasid_Translation = 53;
constant X86_Stack_Explicit = 54;
constant X86_Mtt_Metadata = 55;
constant X86_Prefetch_Other = 56;
constant X86_Access_Type_Last = 57;
extern typedef int x86_memory_type_t;
constant X86_None = 0;
constant X86_Strong_Uncacheable = 1;
constant X86_Uncacheable = 2;
constant X86_Write_Combining = 3;
constant X86_Write_Through = 4;
constant X86_Write_Back = 5;
constant X86_Write_Protected = 6;
extern typedef struct { generic_transaction_t s; linear_address_t linear_address; physical_address_t guest_physical_address; uint16 segnum; uint1 access_linear; uint1 io; uint1 fault_as_if_write; uint1 guest_phys_valid; processor_mode_t mode; x86_access_type_t access_type; x86_memory_type_t pat_type; x86_memory_type_t mtrr_type; x86_memory_type_t effective_type; int sequence_number; } x86_memory_transaction_t;
