/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\util\hashtab.h>
%}

import "simics/host-info.dml";
import "simics/base-types.dml";

extern bool ht_at_end_common(ht_iter_common_t it);
extern void ht_clear_int_table(ht_int_table_t *ht, bool free_vals);
extern void ht_clear_str_table(ht_str_table_t *ht, bool free_vals);
extern void ht_delete_int_table(ht_int_table_t *ht, bool free_values);
extern void ht_delete_str_table(ht_str_table_t *ht, bool free_values);
extern ht_int_entry_t *ht_entry_lookup_int(ht_int_table_t const *ht, uint64 key);
extern ht_str_entry_t *ht_entry_lookup_str(ht_str_table_t const *ht, char const *key);
extern int ht_for_each_entry_int(ht_int_table_t *table, int (*f)(ht_int_table_t *table, uint64 key, void *value, void *data), void *data);
extern int ht_for_each_entry_str(ht_str_table_t *table, int (*f)(ht_str_table_t *table, char const *key, void *value, void *data), void *data);
extern void ht_init_int_table(ht_int_table_t *ht);
extern void ht_init_str_table(ht_str_table_t *ht, bool keys_owned);
extern void ht_init_table_common(ht_table_common_t *ht);
extern void ht_insert_int(ht_int_table_t *ht, uint64 key, void const *value);
extern void ht_insert_str(ht_str_table_t *ht, char const *key, void const *value);
extern bool ht_int_at_end(ht_int_iter_t it);
extern ht_int_iter_t ht_int_iter(ht_int_table_t *ht);
extern ht_int_iter_t ht_int_next(ht_int_iter_t it);
extern ht_iter_common_t ht_iter_common(ht_table_common_t *ht);
extern uint64 ht_iter_int_key(ht_int_iter_t it);
extern void ht_iter_int_set_value(ht_int_iter_t it, void const *value);
extern void *ht_iter_int_value(ht_int_iter_t it);
extern char const *ht_iter_str_key(ht_str_iter_t it);
extern void ht_iter_str_set_value(ht_str_iter_t it, void const *value);
extern void *ht_iter_str_value(ht_str_iter_t it);
extern void *ht_lookup_int(ht_int_table_t const *ht, uint64 key);
extern void *ht_lookup_str(ht_str_table_t const *ht, char const *key);
extern ht_iter_common_t ht_make_iter(ht_table_common_t *ht, uint32 index, ht_entry_common_t *e, ht_entry_common_t *next);
extern ht_iter_common_t ht_next_common(ht_iter_common_t it);
extern uint32 ht_num_entries_common(ht_table_common_t const *ht);
extern uint32 ht_num_entries_int(ht_int_table_t const *ht);
extern uint32 ht_num_entries_str(ht_str_table_t const *ht);
extern int ht_remove_int(ht_int_table_t *ht, uint64 key);
extern int ht_remove_str(ht_str_table_t *ht, char const *key);
extern void ht_set_value_common(ht_entry_common_t *e, void const *value);
extern bool ht_str_at_end(ht_str_iter_t it);
extern ht_str_iter_t ht_str_iter(ht_str_table_t *ht);
extern ht_str_iter_t ht_str_next(ht_str_iter_t it);
extern void *ht_update_int(ht_int_table_t *ht, uint64 key, void const *value);
extern void *ht_update_str(ht_str_table_t *ht, char const *key, void const *value);
extern void *ht_value_common(ht_entry_common_t *e);
extern typedef struct { void const *value; ht_entry_common_t *next; ht_key_t key; uint32 hash; } ht_entry_common_t;
extern typedef struct { ht_entry_common_t e; } ht_int_entry_t;
extern typedef struct { ht_entry_common_t e; } ht_str_entry_t;
extern typedef struct { uint32 nbuckets; uint32 bits; ht_entry_common_t **buckets; uint32 num_elements; } ht_table_common_t;
extern typedef struct { ht_table_common_t t; bool keys_owned; } ht_str_table_t;
extern typedef struct { ht_table_common_t t; } ht_int_table_t;
extern typedef struct { ht_table_common_t *ht; uint32 index; ht_entry_common_t *e; ht_entry_common_t *next; } ht_iter_common_t;
extern typedef struct { ht_iter_common_t it; } ht_int_iter_t;
extern typedef struct { ht_iter_common_t it; } ht_str_iter_t;
extern typedef struct { uint64 i; char const *s; } ht_key_t;
