/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\model-iface\processor-info.h>
%}

import "simics/base/types.dml";
import "simics/base/attr-value.dml";
import "simics/processor/types.dml";
import "simics/pywrap.dml";

extern typedef struct { tuple_int_string_t (*disassemble)(conf_object_t *obj, generic_address_t address, attr_value_t instruction_data, int sub_operation); void (*set_program_counter)(conf_object_t *obj, logical_address_t pc); logical_address_t (*get_program_counter)(conf_object_t *obj); physical_block_t (*logical_to_physical)(conf_object_t *obj, logical_address_t address, access_t access_type); int (*enable_processor)(conf_object_t *obj); int (*disable_processor)(conf_object_t *obj); int (*get_enabled)(conf_object_t *obj); cpu_endian_t (*get_endian)(conf_object_t *obj); conf_object_t *(*get_physical_memory)(conf_object_t *obj); int (*get_logical_address_width)(conf_object_t *obj); int (*get_physical_address_width)(conf_object_t *obj); char const *(*architecture)(conf_object_t *obj); } processor_info_interface_t;
extern typedef struct { tuple_int_string_t (*disassemble)(conf_object_t *obj, generic_address_t address, attr_value_t instruction_data, int sub_operation); void (*set_program_counter)(conf_object_t *obj, logical_address_t pc); logical_address_t (*get_program_counter)(conf_object_t *obj); physical_block_t (*logical_to_physical)(conf_object_t *obj, logical_address_t address, access_t access_type); processor_mode_t (*get_processor_mode)(conf_object_t *obj); int (*enable_processor)(conf_object_t *obj); int (*disable_processor)(conf_object_t *obj); int (*get_enabled)(conf_object_t *obj); cpu_endian_t (*get_endian)(conf_object_t *obj); conf_object_t *(*get_physical_memory)(conf_object_t *obj); int (*get_logical_address_width)(conf_object_t *obj); int (*get_physical_address_width)(conf_object_t *obj); char const *(*architecture)(conf_object_t *obj); } processor_info_v2_interface_t;
extern typedef struct { cpu_endian_t (*get_instruction_endian)(conf_object_t *obj); cpu_endian_t (*get_data_endian)(conf_object_t *obj); } processor_endian_interface_t;
extern typedef struct { tuple_int_string_t (*get_disassembly)(conf_object_t *obj, char const *addr_prefix, generic_address_t address, bool print_cpu, char const *mnemonic); char *(*get_pregs)(conf_object_t *cpu, bool all); attr_value_t (*get_diff_regs)(conf_object_t *obj); char *(*get_pending_exception_string)(conf_object_t *obj); char *(*get_address_prefix)(conf_object_t *obj); physical_block_t (*translate_to_physical)(conf_object_t *obj, char const *prefix, generic_address_t address); } processor_cli_interface_t;
extern typedef struct { int min_alignment; int max_length; int avg_length; } opcode_length_info_t;
extern typedef struct { opcode_length_info_t (*get_opcode_length_info)(conf_object_t *obj); } opcode_info_interface_t;
extern typedef struct { void (*dummy)(conf_object_t *obj); } processor_gui_interface_t;
