/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\simulator\conf-object.h>
%}

import "simics/base/types.dml";
import "simics/base/attr-value.dml";
import "simics/base/conf-object.dml";
import "simics/simulator/sim-get-class.dml";

extern int DBG_check_typing_system(char const *type, attr_value_t *val);
extern bool SIM_class_has_attribute(conf_class_t *cls, char const *attr);
extern conf_class_t *SIM_class_port(conf_class_t const *cls, char const *portname);
extern conf_object_t *SIM_create_object(conf_class_t *cls, char const *name, attr_value_t attrs);
extern int SIM_delete_object(conf_object_t *obj);
extern int SIM_delete_objects(attr_value_t object_list);
extern attr_value_t SIM_get_all_classes(void);
extern attr_value_t SIM_get_all_objects(void);
extern attr_value_t SIM_get_attribute(conf_object_t *obj, char const *name);
extern attr_attr_t SIM_get_attribute_attributes(conf_class_t *cls, char const *attr);
extern attr_value_t SIM_get_attribute_idx(conf_object_t *obj, char const *name, attr_value_t *index);
extern attr_value_t SIM_get_class_attribute(conf_class_t *cls, char const *name);
extern attr_value_t SIM_get_class_attribute_idx(conf_class_t *cls, char const *name, attr_value_t *index);
extern conf_object_t *SIM_get_object(char const *name);
extern set_error_t SIM_set_attribute(conf_object_t *obj, char const *name, attr_value_t *value);
extern set_error_t SIM_set_attribute_default(conf_object_t *obj, char const *name, attr_value_t value);
extern set_error_t SIM_set_attribute_idx(conf_object_t *obj, char const *name, attr_value_t *index, attr_value_t *value);
extern set_error_t SIM_set_class_attribute(conf_class_t *cls, char const *name, attr_value_t *value);
extern set_error_t SIM_set_class_attribute_idx(conf_class_t *cls, char const *name, attr_value_t *index, attr_value_t *value);
extern void VT_add_permanent_object(conf_object_t *obj);
extern attr_value_t VT_get_all_instances(conf_class_t *cls);
extern attr_value_t VT_get_all_objects_impl(attr_value_t ifaces);
extern char const *VT_get_attribute_type(conf_class_t *cls, char const *attr);
extern attr_value_t VT_get_attributes(conf_class_t *cls);
extern char const *VT_get_class_description(conf_class_t const *cls);
extern attr_value_t VT_get_class_extensions(conf_class_t *cls);
extern class_kind_t VT_get_class_kind(conf_class_t const *cls);
extern char const *VT_get_class_short_desc(conf_class_t const *cls);
extern attr_value_t VT_get_interfaces(conf_class_t *cls);
extern conf_object_t *VT_get_object_by_name(char const *name);
extern attr_value_t VT_get_port_classes(conf_class_t *cls);
extern attr_value_t VT_get_port_interfaces(conf_class_t *cls);
extern char const *VT_get_port_obj_desc(conf_class_t *cls, char const *name);
extern bool VT_object_checkpointable(conf_object_t *obj);
extern void VT_rename_object(conf_object_t *obj, char const *newname);
extern void VT_set_delete_protection(conf_object_t *obj, bool on);
extern void VT_set_object_checkpointable(conf_object_t *obj, bool checkpointable);
