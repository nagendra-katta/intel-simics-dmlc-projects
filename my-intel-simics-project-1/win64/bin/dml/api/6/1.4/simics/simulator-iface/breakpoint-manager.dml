/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\simulator-iface\breakpoint-manager.h>
%}

import "simics/device-api.dml";
import "simics/base/cbdata.dml";

extern typedef int sim_bp_type_t;
constant Breakpoint_Type_Default = 0;
constant Breakpoint_Type_Break = 1;
constant Breakpoint_Type_Run_Until = 2;
constant Breakpoint_Type_Wait_For = 3;
constant Breakpoint_Type_Trace = 4;
extern typedef struct { uint64 (*register_breakpoint)(conf_object_t *mgr, void (*delete_breakpoint)(cbdata_call_t data, uint64 id), cbdata_register_t delete_data, attr_value_t (*get_properties)(cbdata_call_t data, uint64 id), cbdata_register_t get_properties_data, void (*set_enabled)(cbdata_call_t data, uint64 id, bool enabled), cbdata_register_t set_enabled_data, void (*set_temporary)(cbdata_call_t data, uint64 id, bool temporary), cbdata_register_t set_temporary_data, void (*set_ignore_count)(cbdata_call_t data, uint64 id, uint64 ignore_count), cbdata_register_t set_ignore_count_data); void (*deleted)(conf_object_t *mgr, uint64 id); } breakpoint_registration_interface_t;
extern typedef struct { bool (*register_type)(conf_object_t *mgr, char const *name, conf_object_t *provider, attr_value_t args, char const *cls, char const *iface, attr_value_t docs, bool object_required, bool temporary_default, bool recursive); bool (*trigger)(conf_object_t *mgr, conf_object_t *provider, uint64 bp_id, conf_object_t *trigger, char const *msg); uint64 (*get_break_id)(conf_object_t *mgr, uint64 bm_id); uint64 (*get_manager_id)(conf_object_t *mgr, conf_object_t *provider, uint64 bp_id); } breakpoint_type_interface_t;
extern typedef struct { uint64 (*register_bp)(conf_object_t *obj, uint64 bp_id); uint64 (*add_bp)(conf_object_t *obj, int flags, attr_value_t data); void (*remove_bp)(conf_object_t *obj, uint64 bp_id); char *(*trace_msg)(conf_object_t *obj, uint64 bp_id); char *(*break_msg)(conf_object_t *obj, uint64 bp_id); char *(*wait_msg)(conf_object_t *obj, uint64 bp_id); attr_value_t (*break_data)(conf_object_t *obj, uint64 bp_id); attr_value_t (*values)(conf_object_t *obj, char const *arg, attr_value_t prev_args); void (*trace)(conf_object_t *obj, char const *msg); } breakpoint_type_provider_interface_t;
extern typedef struct { attr_value_t (*list_breakpoints)(conf_object_t *mgr); void (*delete_breakpoint)(conf_object_t *mgr, uint64 id); attr_value_t (*get_properties)(conf_object_t *mgr, uint64 id); bool (*set_enabled)(conf_object_t *mgr, uint64 id, bool enabled); bool (*set_temporary)(conf_object_t *mgr, uint64 id, bool temporary); bool (*set_ignore_count)(conf_object_t *mgr, uint64 id, uint64 ignore_count); } breakpoint_manager_interface_t;
