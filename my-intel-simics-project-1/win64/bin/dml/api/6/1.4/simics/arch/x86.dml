/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\arch\x86.h>
%}

import "simics/base/memory-transaction.dml";
import "simics/processor/types.dml";
import "simics/processor/generic-spr.dml";
import "simics/pywrap.dml";
import "simics/arch/x86-memop.dml";

extern x86_memory_transaction_t *SIM_x86_mem_trans_from_generic(generic_transaction_t *mop);
extern typedef int x86_sync_instruction_type_t;
constant X86_SFence = 1;
constant X86_LFence = 2;
constant X86_MFence = 3;
extern typedef int x86_register_id_t;
constant X86_Reg_Id_Rax = 0;
constant X86_Reg_Id_Rcx = 1;
constant X86_Reg_Id_Rdx = 2;
constant X86_Reg_Id_Rbx = 3;
constant X86_Reg_Id_Rsp = 4;
constant X86_Reg_Id_Rbp = 5;
constant X86_Reg_Id_Rsi = 6;
constant X86_Reg_Id_Rdi = 7;
constant X86_Reg_Id_R8 = 8;
constant X86_Reg_Id_R9 = 9;
constant X86_Reg_Id_R10 = 10;
constant X86_Reg_Id_R11 = 11;
constant X86_Reg_Id_R12 = 12;
constant X86_Reg_Id_R13 = 13;
constant X86_Reg_Id_R14 = 14;
constant X86_Reg_Id_R15 = 15;
constant X86_Reg_Id_Xmm0 = 16;
constant X86_Reg_Id_Xmm1 = 17;
constant X86_Reg_Id_Xmm2 = 18;
constant X86_Reg_Id_Xmm3 = 19;
constant X86_Reg_Id_Xmm4 = 20;
constant X86_Reg_Id_Xmm5 = 21;
constant X86_Reg_Id_Xmm6 = 22;
constant X86_Reg_Id_Xmm7 = 23;
constant X86_Reg_Id_Xmm8 = 24;
constant X86_Reg_Id_Xmm9 = 25;
constant X86_Reg_Id_Xmm10 = 26;
constant X86_Reg_Id_Xmm11 = 27;
constant X86_Reg_Id_Xmm12 = 28;
constant X86_Reg_Id_Xmm13 = 29;
constant X86_Reg_Id_Xmm14 = 30;
constant X86_Reg_Id_Xmm15 = 31;
constant X86_Reg_Id_Mm0 = 32;
constant X86_Reg_Id_Mm1 = 33;
constant X86_Reg_Id_Mm2 = 34;
constant X86_Reg_Id_Mm3 = 35;
constant X86_Reg_Id_Mm4 = 36;
constant X86_Reg_Id_Mm5 = 37;
constant X86_Reg_Id_Mm6 = 38;
constant X86_Reg_Id_Mm7 = 39;
constant X86_Reg_Id_PC = 40;
constant X86_Reg_Id_CF = 41;
constant X86_Reg_Id_DST = 42;
constant X86_Reg_Id_AF = 43;
constant X86_Reg_Id_ZF = 44;
constant X86_Reg_Id_SF = 45;
constant X86_Reg_Id_OF = 46;
constant X86_Reg_Id_DF = 47;
constant X86_Reg_Id_EFLAGS = 48;
constant X86_Reg_Id_C0 = 49;
constant X86_Reg_Id_C1 = 50;
constant X86_Reg_Id_C2 = 51;
constant X86_Reg_Id_C3 = 52;
constant X86_Reg_Id_Top = 53;
constant X86_Reg_Id_Not_Used = 54;
constant X86_Reg_Id_Local_Max = 55;
extern typedef int x86_memory_or_io_t;
constant X86_Memory = 0;
constant X86_IO = 1;
extern typedef int x86_tlb_inv_t;
constant X86_Tlb_Invalidate_Page = 0;
constant X86_Tlb_Invalidate_Address_Space = 4;
constant X86_Tlb_Invalidate_Address_Space_NonGlobal = 1;
constant X86_Tlb_Invalidate_All = 2;
constant X86_Tlb_Invalidate_All_NonGlobal = 3;
extern typedef int x86_pin_t;
constant Pin_Init = 0;
constant Pin_Smi = 1;
constant Pin_Nmi = 2;
constant Pin_Ignne = 3;
constant Pin_Mcerr = 4;
constant Pin_Cmci = 5;
extern typedef int local_apic_interrupt_t;
constant Apic_Lvt_2e = 736;
constant Apic_CMCI = 752;
constant Apic_Performance_Counter = 832;
constant Apic_Thermal_Sensor = 816;
extern typedef int x86_msr_access_type_t;
extern x86_msr_access_type_t Sim_X86_Msr_Instruction_Access;
extern x86_msr_access_type_t Sim_X86_Msr_Attribute_Access;
extern x86_msr_access_type_t Sim_X86_Msr_Int_Register_Access;
extern x86_msr_access_type_t Sim_X86_Msr_VMX_Access;
extern x86_msr_access_type_t Sim_X86_Msr_Architectural_Access;
extern typedef int x86_msr_ret_t;
extern x86_msr_ret_t Sim_X86_Msr_Ok;
extern x86_msr_ret_t Sim_X86_Msr_GP_Fault;
extern x86_msr_ret_t Sim_X86_Msr_Not_Handled;
extern typedef int x86_system_seg_t;
constant X86_Gdtr = 0;
constant X86_Idtr = 1;
extern typedef int x86_cr_t;
constant X86_Cr0 = 0;
constant X86_Cr2 = 2;
constant X86_Cr3 = 3;
constant X86_Cr4 = 4;
constant X86_Cr8 = 8;
extern typedef int x86_dr_t;
constant X86_Dr0 = 0;
constant X86_Dr1 = 1;
constant X86_Dr2 = 2;
constant X86_Dr3 = 3;
constant X86_Dr6 = 6;
constant X86_Dr7 = 7;
extern typedef int x86_xcr_t;
constant X86_Xcr0 = 0;
extern typedef int x86_activity_t;
constant X86_Activity_Normal = 0;
constant X86_Activity_Hlt = 1;
constant X86_Activity_Shutdown = 2;
constant X86_Activity_Wait_For_SIPI = 3;
constant X86_Activity_Cx_State = 4;
constant X86_Activity_MWait = 5;
constant X86_Activity_Senter_Sleep_State = 6;
extern typedef int x86_exec_mode_t;
constant X86_Exec_Mode_Real = 0;
constant X86_Exec_Mode_V86 = 1;
constant X86_Exec_Mode_Prot = 2;
constant X86_Exec_Mode_Compat = 3;
constant X86_Exec_Mode_64 = 4;
extern typedef int x86_detailed_exec_mode_t;
constant X86_Detailed_Exec_Mode_Real_16 = 0;
constant X86_Detailed_Exec_Mode_Real_32 = 1;
constant X86_Detailed_Exec_Mode_V86 = 2;
constant X86_Detailed_Exec_Mode_Protected_16 = 3;
constant X86_Detailed_Exec_Mode_Protected_32 = 4;
constant X86_Detailed_Exec_Mode_Protected_64 = 5;
constant X86_Detailed_Exec_Mode_Compatibility_16 = 6;
constant X86_Detailed_Exec_Mode_Compatibility_32 = 7;
extern typedef int x86_seg_t;
constant X86_Seg_ES = 0;
constant X86_Seg_CS = 1;
constant X86_Seg_SS = 2;
constant X86_Seg_DS = 3;
constant X86_Seg_FS = 4;
constant X86_Seg_GS = 5;
constant X86_Seg_LDTR = 6;
constant X86_Seg_TR = 7;
constant X86_Seg_None = 8;
extern typedef int x86_intstate_t;
constant X86_Intstate_Not_Blocking = 0;
constant X86_Intstate_Blocking_INT_Sti = 1;
constant X86_Intstate_Blocking_INT_Mov_Ss = 2;
constant X86_Intstate_Blocking_INIT = 4;
constant X86_Intstate_Blocking_SMI = 8;
constant X86_Intstate_Blocking_NMI = 16;
extern typedef int x86_exception_source_t;
constant X86_Exc_Hardware = 0;
constant X86_Exc_Software = 1;
constant X86_Exc_External = 2;
constant X86_Exc_Software_Debug = 3;
constant X86_Exc_Software_Priv = 4;
constant X86_Exc_Triple_Fault = 5;
constant X86_Exc_NMI = 6;
constant X86_Exc_Other_Event = 7;
extern typedef int x86_processor_mode_t;
constant X86_Processor_Mode_Privileged = 0;
constant X86_Processor_Mode_User = 1;
constant X86_Processor_Mode_Current = 2;
extern typedef int x86_alignment_t;
constant X86_Alignment_Not_Required = 0;
constant X86_Alignment_Required = 1;
extern typedef int vmp_feature_t;
constant Vmp_Feature_Ept = 0;
constant Vmp_Feature_Tpr_Threshold = 1;
constant Vmp_Feature_Unrestricted_Guest = 2;
constant Vmp_Feature_Backoff = 3;
constant Vmp_Feature_Shadow_VMCS = 4;
constant Vmp_Feature_Nested_EPT = 5;
constant Vmp_Feature_Direct_Rdtsc = 6;
constant Vmp_Feature_Five_Level_Paging = 7;
extern typedef int vmp_info_t;
constant Vmp_Info_Cpu_Version = 0;
constant Vmp_Info_Vmxmon_Version = 1;
extern typedef int xed_data_type_t;
constant Xed_Iform = 0;
extern typedef struct { char const *(*get_enum_name)(conf_object_t *obj, x86_access_type_t at); char const *(*get_short_name)(conf_object_t *obj, x86_access_type_t at); char const *(*get_description)(conf_object_t *obj, x86_access_type_t at); bool (*implicit)(conf_object_t *obj, x86_access_type_t at); } x86_access_type_interface_t;
extern typedef struct { int valid; physical_address_t paddr; } tagged_physical_address_t;
extern typedef struct { void (*flush_all)(conf_object_t *obj, int keep_global_entries); void (*flush_page)(conf_object_t *obj, linear_address_t laddr); int (*lookup)(conf_object_t *obj, x86_memory_transaction_t *mem_tr); void (*add)(conf_object_t *obj, processor_mode_t mode, read_or_write_t read_or_write, data_or_instr_t data_or_instr, int global_page, x86_memory_type_t pat_type, x86_memory_type_t mtrr_type, linear_address_t laddr, physical_address_t paddr, int page_size); tagged_physical_address_t (*itlb_lookup)(conf_object_t *obj, linear_address_t laddr, processor_mode_t mode); void (*set_pae_mode)(conf_object_t *obj, bool pae_mode); } x86_tlb_interface_t;
extern typedef struct { access_t supervisor_access; access_t user_access; bool global_page; x86_memory_type_t pat_type; x86_memory_type_t mtrr_type; uint32 page_size_k; } x86_tlb_attrs_t;
extern typedef struct { linear_address_t linear_page_start; physical_address_t physical_page_start; x86_tlb_attrs_t attrs; } x86_tlb_entry_t;
extern typedef struct { void (*flush_all)(conf_object_t *obj, int keep_global_entries); void (*flush_page)(conf_object_t *obj, linear_address_t laddr); x86_tlb_entry_t const *(*lookup)(conf_object_t *obj, x86_memory_transaction_t *mem_tr); void (*add)(conf_object_t *obj, linear_address_t laddr, physical_address_t paddr, x86_tlb_attrs_t attrs); tagged_physical_address_t (*itlb_lookup)(conf_object_t *obj, linear_address_t laddr, processor_mode_t mode); } x86_tlb_v2_interface_t;
extern typedef struct { uint64 pte_attrs; x86_memory_type_t pat_type; x86_memory_type_t mtrr_type; uint32 page_size_k; } x86_tlb_attrs_v3_t;
extern typedef struct { linear_address_t linear_page_start; physical_address_t physical_page_start; x86_tlb_attrs_v3_t attrs; } x86_tlb_entry_v3_t;
extern typedef struct { void (*add)(conf_object_t *obj, uint64 hint, linear_address_t laddr, physical_address_t paddr, x86_tlb_attrs_v3_t attrs); x86_tlb_entry_v3_t const *(*lookup)(conf_object_t *obj, uint64 hint, x86_memory_transaction_t *mem_tr); tagged_physical_address_t (*itlb_lookup)(conf_object_t *obj, uint64 hint, linear_address_t laddr, processor_mode_t mode); void (*invalidate_page)(conf_object_t *obj, uint64 hint, linear_address_t laddr); void (*invalidate)(conf_object_t *obj, uint32 type, uint64 hint, linear_address_t la); } x86_tlb_v3_interface_t;
extern typedef struct { bool valid; linear_address_t addr; } tagged_linear_address_t;
extern typedef struct { void (*set_pin_status)(conf_object_t *obj, x86_pin_t pin, int status); void (*start_up)(conf_object_t *obj, uint32 start_address); int (*interrupt)(conf_object_t *obj, int (*ack)(conf_object_t *obj), conf_object_t *data); void (*uninterrupt)(conf_object_t *obj, int (*ack)(conf_object_t *obj)); int (*has_pending_interrupt)(conf_object_t *obj); int (*has_waiting_interrupt)(conf_object_t *obj); tagged_linear_address_t (*logical_to_linear)(conf_object_t *obj, int segment, logical_address_t addr); physical_address_t (*linear_to_physical)(conf_object_t *obj, data_or_instr_t d_or_i, linear_address_t addr); void (*enter_acpi_c2_state)(conf_object_t *obj); } x86_interface_t;
extern typedef struct { int taken; uint64 out_a; uint64 out_b; uint64 out_c; uint64 out_d; } cpuid_ret_t;
extern typedef struct { cpuid_ret_t (*cpuid)(conf_object_t *obj, conf_object_t *cpu, uint32 in_eax, uint32 in_ebx, uint32 in_ecx, uint32 in_edx); } x86_cpuid_interface_t;
extern typedef struct { uint64 a; uint64 b; uint64 c; uint64 d; } cpuid_value_t;
extern typedef struct { cpuid_value_t (*cpuid_query)(conf_object_t *obj, uint32 leaf, uint32 subleaf); } x86_cpuid_query_interface_t;
extern typedef struct { uint64 (*tpr_r)(conf_object_t *obj); void (*tpr_w)(conf_object_t *obj, uint64 tpr); void (*local_int)(conf_object_t *obj, local_apic_interrupt_t int_type); void (*power_on)(conf_object_t *obj, bool bsp, int apic_id); void (*init)(conf_object_t *obj); bool (*enabled_r)(conf_object_t *obj); } apic_cpu_interface_t;
extern typedef struct { void (*set_a20_line)(conf_object_t *obj, int value); int (*get_a20_line)(conf_object_t *obj); } a20_interface_t;
extern typedef struct { x86_msr_ret_t status; uint64 value; } x86_msr_getter_ret_t;
extern typedef struct { void (*register_handlers)(conf_object_t *cpu, int64 number, x86_msr_getter_func_t getter, lang_void *getter_data, x86_msr_setter_func_t setter, lang_void *setter_data, char const *name); void (*unregister_handlers)(conf_object_t *cpu, int64 number); x86_msr_getter_ret_t (*get)(conf_object_t *cpu, int64 number, x86_msr_access_type_t type); x86_msr_ret_t (*set)(conf_object_t *cpu, int64 number, uint64 value, x86_msr_access_type_t type); char const *(*get_name)(conf_object_t *cpu, int64 number); int64 (*get_number)(conf_object_t *cpu, char const *name); attr_value_t (*get_all_valid_numbers)(conf_object_t *cpu); } x86_msr_interface_t;
extern typedef struct { void (*flush)(conf_object_t *obj, conf_object_t *cpu, bool writeback); } x86_cache_flush_interface_t;
extern typedef struct { uint64 gpr[16]; uint16 seg_sel[6]; uint16 tr_sel; uint16 ldtr_sel; uint64 seg_base[6]; uint64 tr_base; uint64 ldtr_base; uint32 seg_attr[6]; uint32 tr_attr; uint32 ldtr_attr; uint32 seg_limit[6]; uint32 tr_limit; uint32 ldtr_limit; uint64 cr0; uint64 cr2; uint64 cr3; uint64 cr4; uint64 cr8; uint64 ia32_efer; uint64 rip; uint64 rflags; uint64 dr[4]; uint64 dr6; uint64 dr7; uint32 smbase; uint16 idtr_limit; uint16 gdtr_limit; uint64 idtr_base; uint64 gdtr_base; bool activity_hlt; bool io_instr_restart; bool block_nmi; uint8 vmx_mode; bool ept_is_on; bool reserved[3]; uint64 io_rip; uint64 io_lin_addr; uint32 io_instr_info; uint32 reserved2; uint64 bndcfgs; uint64 eptp; uint64 pdpte[4]; uint64 ssp; uint64 reserved3[6]; } smm_reg_state_t;
extern typedef struct { void (*get_state)(conf_object_t *cpu, smm_reg_state_t *state); void (*set_state)(conf_object_t *cpu, smm_reg_state_t const *state); uint64 (*smram_read)(conf_object_t *obj, uint32 smram_offs, uint32 len); void (*smram_write)(conf_object_t *obj, uint32 smram_offs, uint32 len, uint64 val); } x86_smm_state_interface_t;
extern typedef struct { void (*save_state)(conf_object_t *obj, conf_object_t *cpu); void (*restore_state)(conf_object_t *obj, conf_object_t *cpu); } x86_smm_interface_t;
extern typedef struct { bool efer_lma; bool cs_l; bool cs_d; bool ss_b; } x86_xmode_info_t;
extern typedef struct { bool valid; uint16 sel; uint64 base; uint32 attr; uint32 limit; } x86_seg_reg_t;
extern typedef struct { uint64 base; uint16 limit; } x86_system_seg_reg_t;
extern typedef struct { uint64 llo64; uint64 lhi64; uint64 hlo64; uint64 hhi64; } ymm_reg_t;
extern typedef struct { uint64 lo64; uint64 hi64; } xmm_reg_t;
extern typedef struct { bool armed; uint64 address; uint64 extensions; uint64 hints; } x86_monitor_info_t;
extern typedef struct { uint64 extensions; uint64 hints; } x86_mwait_info_t;
extern typedef struct { bool pending; uint64 pending_dr6; } x86_pending_debug_exc_t;
extern typedef struct { uint64 low; uint16 high; } x86_fpu_reg_t;
extern typedef struct { uint16 cw; uint16 sw; uint16 tag; uint16 opc; uint64 last_instr_ptr; uint64 last_operand_ptr; uint16 last_instr_sel; uint16 last_operand_sel; uint32 pad; } x86_fpu_env_t;
extern typedef struct { uint64 (*get_gpr)(conf_object_t *cpu, uint32 index); void (*set_gpr)(conf_object_t *cpu, uint32 index, uint64 val); uint64 (*get_rip)(conf_object_t *cpu); void (*set_rip)(conf_object_t *cpu, uint64 rip); uint64 (*get_rflags)(conf_object_t *cpu); void (*set_rflags)(conf_object_t *cpu, uint64 rflags); void (*set_status_flags)(conf_object_t *cpu, uint16 flags); x86_seg_reg_t (*get_seg)(conf_object_t *cpu, x86_seg_t n); void (*set_seg)(conf_object_t *cpu, x86_seg_t n, x86_seg_reg_t seg); x86_system_seg_reg_t (*get_system_seg)(conf_object_t *cpu, x86_system_seg_t n); void (*set_system_seg)(conf_object_t *cpu, x86_system_seg_t n, x86_system_seg_reg_t seg); uint64 (*get_cr)(conf_object_t *cpu, x86_cr_t n); void (*set_cr)(conf_object_t *cpu, x86_cr_t n, uint64 val); uint64 (*get_efer)(conf_object_t *cpu); void (*set_efer)(conf_object_t *cpu, uint64 efer); uint64 (*get_xcr)(conf_object_t *cpu, x86_xcr_t n); void (*set_xcr)(conf_object_t *cpu, x86_xcr_t n, uint64 val); x86_fpu_reg_t (*get_freg)(conf_object_t *cpu, uint32 index); void (*set_freg)(conf_object_t *cpu, uint32 index, x86_fpu_reg_t freg); x86_fpu_env_t (*get_fpu_env)(conf_object_t *cpu); void (*set_fpu_env)(conf_object_t *cpu, x86_fpu_env_t state); xmm_reg_t (*get_xmm)(conf_object_t *cpu, uint32 index); void (*set_xmm)(conf_object_t *cpu, uint32 index, xmm_reg_t val); ymm_reg_t (*get_ymm)(conf_object_t *cpu, uint32 index); void (*set_ymm)(conf_object_t *cpu, uint32 index, ymm_reg_t val); uint32 (*get_mxcsr)(conf_object_t *cpu); void (*set_mxcsr)(conf_object_t *cpu, uint32 mxcsr); uint64 (*get_dr)(conf_object_t *cpu, x86_dr_t n); void (*set_dr)(conf_object_t *cpu, x86_dr_t n, uint64 val); bool (*get_in_smm)(conf_object_t *cpu); void (*set_in_smm)(conf_object_t *cpu, bool val); uint64 (*get_smm_base)(conf_object_t *cpu); void (*set_smm_base)(conf_object_t *cpu, uint64 val); x86_monitor_info_t (*get_monitor_info)(conf_object_t *cpu); void (*set_monitor_info)(conf_object_t *cpu, x86_monitor_info_t val); x86_mwait_info_t (*get_mwait_info)(conf_object_t *cpu); void (*set_mwait_info)(conf_object_t *cpu, x86_mwait_info_t val); x86_activity_t (*get_activity_state)(conf_object_t *cpu); void (*set_activity_state)(conf_object_t *cpu, x86_activity_t val); x86_intstate_t (*get_interruptibility_state)(conf_object_t *cpu); void (*set_interruptibility_state)(conf_object_t *cpu, x86_intstate_t val); x86_pending_debug_exc_t (*get_pending_debug_exc)(conf_object_t *cpu); void (*set_pending_debug_exc)(conf_object_t *cpu, x86_pending_debug_exc_t val); x86_xmode_info_t (*get_xmode_info)(conf_object_t *cpu); x86_exec_mode_t (*get_exec_mode)(conf_object_t *cpu); uint32 (*get_mxcsr_mask)(conf_object_t *cpu); uint64 (*get_ext_state_dirty_bits)(conf_object_t *cpu); void (*or_ext_state_dirty_bits)(conf_object_t *cpu, uint64 dirty_bits); void (*and_ext_state_dirty_bits)(conf_object_t *cpu, uint64 dirty_bits); uint64 (*get_pdpte)(conf_object_t *cpu, int num); void (*set_pdpte)(conf_object_t *cpu, int num, uint64 val); uint32 (*get_vmx_mode)(conf_object_t *cpu); } x86_reg_access_interface_t;
extern typedef struct { void (*DE_fault)(conf_object_t *cpu); void (*BR_fault)(conf_object_t *cpu); void (*UD_fault)(conf_object_t *cpu); void (*NM_fault)(conf_object_t *cpu); void (*DF_abort)(conf_object_t *cpu, char const *desc); void (*TS_fault)(conf_object_t *cpu, uint16 sel); void (*NP_fault)(conf_object_t *cpu, uint16 sel_vec, bool is_vec); void (*SS_fault)(conf_object_t *cpu, uint16 sel); void (*GP_fault)(conf_object_t *cpu, uint16 sel_vec, bool is_vec, char const *desc); void (*PF_fault)(conf_object_t *cpu, linear_address_t laddr, uint32 ecode); void (*MF_fault)(conf_object_t *cpu); void (*AC_fault)(conf_object_t *cpu); void (*XM_fault)(conf_object_t *cpu); } x86_exception_interface_t;
extern typedef struct { uint64 value; exception_type_t exception; } x86_read_physical_ret_t;
extern typedef struct { uint64 (*read_logical)(conf_object_t *cpu, logical_address_t offs, x86_seg_t seg, uint32 len, x86_processor_mode_t mode, x86_access_type_t access_type); void (*read_logical_buf)(conf_object_t *cpu, logical_address_t offs, x86_seg_t seg, uint32 len, void *p, x86_processor_mode_t mode, x86_access_type_t access_type, x86_alignment_t alignment); void (*write_logical)(conf_object_t *cpu, logical_address_t offs, x86_seg_t seg, uint32 len, uint64 val, x86_processor_mode_t mode, x86_access_type_t access_type); void (*write_logical_buf)(conf_object_t *cpu, logical_address_t offs, x86_seg_t seg, uint32 len, void const *p, x86_processor_mode_t mode, x86_access_type_t access_type, x86_alignment_t alignment); } x86_memory_access_interface_t;
extern typedef struct { uint64 (*read_logical)(conf_object_t *cpu, x86_seg_t seg, logical_address_t offs, uint32 size, x86_processor_mode_t mode, x86_access_type_t access_type); void (*read_logical_buf)(conf_object_t *cpu, uint8 *dst, x86_seg_t seg, logical_address_t offs, uint32 size, x86_processor_mode_t mode, x86_access_type_t access_type); void (*write_logical)(conf_object_t *cpu, uint64 val, x86_seg_t seg, logical_address_t offs, uint32 size, x86_processor_mode_t mode, x86_access_type_t access_type); void (*write_logical_buf)(conf_object_t *cpu, uint8 const *src, x86_seg_t seg, logical_address_t offs, uint32 size, x86_processor_mode_t mode, x86_access_type_t access_type); x86_read_physical_ret_t (*read_physical)(conf_object_t *cpu, physical_address_t address, uint32 size, x86_access_type_t access_type); exception_type_t (*read_physical_buf)(conf_object_t *cpu, uint8 *dst, physical_address_t address, uint32 size, x86_access_type_t access_type); exception_type_t (*write_physical)(conf_object_t *cpu, uint64 val, physical_address_t address, uint32 size, x86_access_type_t access_type); exception_type_t (*write_physical_buf)(conf_object_t *cpu, uint8 const *src, physical_address_t address, uint32 size, x86_access_type_t access_type); } x86_memory_operation_interface_t;
extern typedef struct { uint32 (*get_block_count)(conf_object_t *cpu); void (*set_block_count)(conf_object_t *cpu, uint32 cnt); } x86_vmp_control_interface_t;
extern typedef struct { bool (*class_has_support)(conf_object_t *obj); bool (*host_support)(conf_object_t *obj); bool (*compatible_config)(conf_object_t *obj); bool (*enable)(conf_object_t *obj); void (*disable)(conf_object_t *obj); bool (*enabled)(conf_object_t *obj); void (*set_threshold)(conf_object_t *obj, int threshold); bool (*get_feature)(conf_object_t *obj, vmp_feature_t feature); bool (*set_feature)(conf_object_t *obj, vmp_feature_t feature, bool val); uint64 (*get_info)(conf_object_t *obj, vmp_info_t info); } vmp_interface_t;
extern typedef struct { int (*get_last)(conf_object_t *obj, xed_data_type_t type); int (*decode)(conf_object_t *obj, xed_data_type_t type, bytes_t bytes); char const *(*to_string)(conf_object_t *obj, xed_data_type_t type, int value); } xed_access_interface_t;
extern typedef struct { physical_block_t (*guest_physical_to_physical)(conf_object_t *obj, generic_address_t address, x86_processor_mode_t cpu_mode, access_t access); bool (*is_ept_active)(conf_object_t *obj); } x86_ept_interface_t;
extern typedef x86_msr_getter_ret_t (*x86_msr_getter_func_t)(conf_object_t *cpu, int64 number, x86_msr_access_type_t type, lang_void *user_data);
extern typedef x86_msr_ret_t (*x86_msr_setter_func_t)(conf_object_t *cpu, int64 spr_number, uint64 value, x86_msr_access_type_t type, lang_void *user_data);
