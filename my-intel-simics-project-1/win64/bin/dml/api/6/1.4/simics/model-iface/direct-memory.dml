/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\model-iface\direct-memory.h>
%}

import "simics/base/types.dml";
import "simics/processor/types.dml";
import "simics/base/direct-memory.dml";
import "simics/base/transaction.dml";
import "simics/pywrap.dml";

extern typedef struct { direct_memory_handle_t (*get_handle)(conf_object_t *obj, conf_object_t *requester, uint64 subsystem, uint64 offs, uint32 size); direct_memory_t (*request)(conf_object_t *obj, direct_memory_handle_t handle, access_t permission, access_t inhibit); void (*revoke)(conf_object_t *obj, access_t access, access_t permission, access_t inhibit); void *(*get_user_data)(conf_object_t *obj, direct_memory_handle_t handle); void (*set_user_data)(conf_object_t *obj, direct_memory_handle_t handle, void *user_data); void (*release)(conf_object_t *obj, direct_memory_handle_t handle); void (*ack)(conf_object_t *obj, direct_memory_ack_id_t id); } direct_memory_interface_t;
extern typedef struct { direct_memory_lookup_t (*lookup)(conf_object_t *obj, conf_object_t *requester, physical_address_t addr, uint32 size, access_t access); } direct_memory_lookup_interface_t;
extern typedef struct { direct_memory_lookup_t (*lookup)(conf_object_t *obj, transaction_t *transaction, physical_address_t addr, access_t access); } direct_memory_lookup_v2_interface_t;
extern typedef struct { void (*release)(conf_object_t *obj, conf_object_t *target, direct_memory_handle_t handle, direct_memory_ack_id_t id); void (*update_permission)(conf_object_t *obj, conf_object_t *target, direct_memory_handle_t handle, access_t lost_access, access_t lost_permission, access_t lost_inhibit, direct_memory_ack_id_t id); void (*conflicting_access)(conf_object_t *obj, conf_object_t *target, direct_memory_handle_t handle, access_t conflicting_permission, direct_memory_ack_id_t id); } direct_memory_update_interface_t;
extern typedef struct { void (*revoke)(conf_object_t *obj, uint64 base, uint64 size, access_t access, access_t perm, access_t inhibit); bool (*set_access_bits)(conf_object_t *obj, conf_object_t *requester, uint64 base, uint64 size, access_t access); } direct_memory_flush_interface_t;
extern typedef struct { direct_memory_tags_t (*get_tags_data)(conf_object_t *obj, direct_memory_handle_t handle); } direct_memory_tags_interface_t;
