/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\util\interval-set.h>
%}

import "simics/host-info.dml";
import "simics/base-types.dml";
import "simics/util/vect.dml";

extern void clear_interval(interval_set_t *_is);
extern void for_all_intervals(interval_set_t *_is, intervals_func_t f, void *data);
extern void for_some_intervals(interval_set_t *_is, uint64 start, uint64 end, intervals_func_t f, void *data);
extern void free_interval(interval_set_t *_is);
extern void *get_higher_interval_ptr(interval_set_t *_is, uint64 address);
extern void *get_interval_ptr(interval_set_t *_is, uint64 address);
extern uint32 get_interval_vector(interval_set_t *_is, uint64 address, range_node_t **res);
extern uint32 get_interval_vector_and_range(interval_set_t *_is, uint64 address, range_node_t **res, uint64 *first_address, uint64 *last_address);
extern void *get_lower_interval_ptr(interval_set_t *_is, uint64 address);
extern void init_interval(interval_set_t *_is, int allow_overlap);
extern void insert_interval(interval_set_t *_is, uint64 start, uint64 end, void *ptr);
extern int interval_set_empty(interval_set_t *_is);
extern range_node_t *interval_set_iter_next(interval_set_iter_t *it);
extern void interval_set_new_iter(interval_set_t const *_is, interval_set_iter_t *it, uint64 start, uint64 end);
extern interval_set_t *new_interval(int dummy);
extern void remove_interval(interval_set_t *_is, uint64 start, uint64 end, void *ptr);
extern int touch_interval(interval_set_t *_is, uint64 start, uint64 end);
extern typedef struct { struct { int size; int used; struct { } *elements; } sections; } interval_set_t;
extern typedef struct { interval_set_t const *_is; uint64 start; uint64 end; uint32 sect; uint32 inum; } interval_set_iter_t;
extern typedef struct { uint64 start; uint64 end; void *ptr; } range_node_t;
extern typedef void (*intervals_func_t)(uint64 start, uint64 end, void *el, void *data);
