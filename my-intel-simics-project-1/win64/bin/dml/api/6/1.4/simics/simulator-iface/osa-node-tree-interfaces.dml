/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include <simics\simulator-iface\osa-node-tree-interfaces.h>
%}

import "simics/device-api.dml";
import "simics/base/cbdata.dml";
import "simics/simulator-api.dml";

extern typedef struct { attr_value_t (*get_root_nodes)(conf_object_t *obj); attr_value_t (*get_node)(conf_object_t *obj, node_id_t node_id); attr_value_t (*get_current_nodes)(conf_object_t *obj, node_id_t base_id, conf_object_t *cpu); attr_value_t (*get_current_processors)(conf_object_t *obj, node_id_t node_id); attr_value_t (*get_all_processors)(conf_object_t *obj); conf_object_t *(*get_mapper)(conf_object_t *obj, node_id_t node_id); attr_value_t (*get_parent)(conf_object_t *obj, node_id_t node_id); attr_value_t (*get_children)(conf_object_t *obj, node_id_t node_id); attr_value_t (*get_formatted_properties)(conf_object_t *obj, uint64 node_id); } osa_node_tree_query_interface_t;
extern typedef struct { cancel_id_t (*notify_create)(conf_object_t *obj, node_id_t node_id, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id), cbdata_register_t data); cancel_id_t (*notify_destroy)(conf_object_t *obj, node_id_t node_id, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id), cbdata_register_t data); cancel_id_t (*notify_property_change)(conf_object_t *obj, node_id_t node_id, char const *key, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id, char const *key, attr_value_t old_val, attr_value_t new_val), cbdata_register_t data); cancel_id_t (*notify_cpu_move_from)(conf_object_t *obj, node_id_t node_id, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, attr_value_t node_path), cbdata_register_t data); cancel_id_t (*notify_cpu_move_to)(conf_object_t *obj, node_id_t node_id, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, attr_value_t node_path), cbdata_register_t data); cancel_id_t (*notify_event)(conf_object_t *obj, node_id_t node_id, char const *event_name, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id, char const *event_name, attr_value_t event_data), cbdata_register_t data); cancel_id_t (*notify_enable)(conf_object_t *obj, void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data); cancel_id_t (*notify_disable)(conf_object_t *obj, void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data); void (*cancel_notify)(conf_object_t *obj, cancel_id_t cancel_id); cancel_id_t (*notify_callbacks_done)(conf_object_t *obj, uint64 node_id, void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data); } osa_node_tree_notification_interface_t;
